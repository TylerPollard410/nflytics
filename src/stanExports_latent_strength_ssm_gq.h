// Generated by rstantools.  Do not edit by hand.

/*
    nflytics is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    nflytics is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with nflytics.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.37.0-61-g7c641b3
#include <stan/model/model_header.hpp>
namespace model_latent_strength_ssm_gq_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 192> locations_array__ =
  {" (found before start of program)",
  " (in 'latent_strength_ssm_gq', line 51, column 2 to column 23)",
  " (in 'latent_strength_ssm_gq', line 52, column 2 to column 48)",
  " (in 'latent_strength_ssm_gq', line 53, column 2 to column 44)",
  " (in 'latent_strength_ssm_gq', line 54, column 2 to column 40)",
  " (in 'latent_strength_ssm_gq', line 55, column 2 to column 68)",
  " (in 'latent_strength_ssm_gq', line 56, column 2 to column 31)",
  " (in 'latent_strength_ssm_gq', line 57, column 2 to column 51)",
  " (in 'latent_strength_ssm_gq', line 58, column 2 to column 41)",
  " (in 'latent_strength_ssm_gq', line 59, column 2 to column 83)",
  " (in 'latent_strength_ssm_gq', line 60, column 2 to column 54)",
  " (in 'latent_strength_ssm_gq', line 61, column 2 to column 61)",
  " (in 'latent_strength_ssm_gq', line 62, column 2 to column 85)",
  " (in 'latent_strength_ssm_gq', line 63, column 2 to column 54)",
  " (in 'latent_strength_ssm_gq', line 64, column 2 to column 61)",
  " (in 'latent_strength_ssm_gq', line 65, column 2 to column 26)",
  " (in 'latent_strength_ssm_gq', line 68, column 2 to column 31)",
  " (in 'latent_strength_ssm_gq', line 69, column 2 to column 44)",
  " (in 'latent_strength_ssm_gq', line 70, column 2 to column 47)",
  " (in 'latent_strength_ssm_gq', line 93, column 2 to column 29)",
  " (in 'latent_strength_ssm_gq', line 94, column 2 to column 38)",
  " (in 'latent_strength_ssm_gq', line 96, column 2 to column 70)",
  " (in 'latent_strength_ssm_gq', line 97, column 2 to column 60)",
  " (in 'latent_strength_ssm_gq', line 98, column 2 to column 53)",
  " (in 'latent_strength_ssm_gq', line 100, column 2 to column 64)",
  " (in 'latent_strength_ssm_gq', line 101, column 2 to column 59)",
  " (in 'latent_strength_ssm_gq', line 102, column 2 to column 46)",
  " (in 'latent_strength_ssm_gq', line 145, column 2 to column 24)",
  " (in 'latent_strength_ssm_gq', line 146, column 2 to column 23)",
  " (in 'latent_strength_ssm_gq', line 72, column 2 to column 34)",
  " (in 'latent_strength_ssm_gq', line 74, column 4 to line 75, column 83)",
  " (in 'latent_strength_ssm_gq', line 73, column 2 to line 75, column 83)",
  " (in 'latent_strength_ssm_gq', line 77, column 4 to line 78, column 72)",
  " (in 'latent_strength_ssm_gq', line 76, column 2 to line 78, column 72)",
  " (in 'latent_strength_ssm_gq', line 79, column 2 to column 80)",
  " (in 'latent_strength_ssm_gq', line 86, column 6 to line 87, column 119)",
  " (in 'latent_strength_ssm_gq', line 85, column 11 to line 88, column 5)",
  " (in 'latent_strength_ssm_gq', line 82, column 6 to column 32)",
  " (in 'latent_strength_ssm_gq', line 83, column 6 to line 84, column 119)",
  " (in 'latent_strength_ssm_gq', line 81, column 31 to line 85, column 5)",
  " (in 'latent_strength_ssm_gq', line 81, column 4 to line 88, column 5)",
  " (in 'latent_strength_ssm_gq', line 80, column 23 to line 89, column 3)",
  " (in 'latent_strength_ssm_gq', line 80, column 2 to line 89, column 3)",
  " (in 'latent_strength_ssm_gq', line 104, column 11 to column 18)",
  " (in 'latent_strength_ssm_gq', line 104, column 4 to column 57)",
  " (in 'latent_strength_ssm_gq', line 105, column 4 to column 51)",
  " (in 'latent_strength_ssm_gq', line 106, column 11 to column 18)",
  " (in 'latent_strength_ssm_gq', line 106, column 4 to column 58)",
  " (in 'latent_strength_ssm_gq', line 107, column 4 to column 28)",
  " (in 'latent_strength_ssm_gq', line 109, column 6 to column 46)",
  " (in 'latent_strength_ssm_gq', line 110, column 6 to column 52)",
  " (in 'latent_strength_ssm_gq', line 111, column 13 to column 24)",
  " (in 'latent_strength_ssm_gq', line 111, column 6 to column 32)",
  " (in 'latent_strength_ssm_gq', line 112, column 33 to column 61)",
  " (in 'latent_strength_ssm_gq', line 112, column 6 to column 61)",
  " (in 'latent_strength_ssm_gq', line 113, column 13 to column 20)",
  " (in 'latent_strength_ssm_gq', line 113, column 6 to column 56)",
  " (in 'latent_strength_ssm_gq', line 131, column 8 to column 107)",
  " (in 'latent_strength_ssm_gq', line 134, column 10 to column 53)",
  " (in 'latent_strength_ssm_gq', line 135, column 10 to column 49)",
  " (in 'latent_strength_ssm_gq', line 136, column 10 to column 37)",
  " (in 'latent_strength_ssm_gq', line 132, column 71 to line 137, column 9)",
  " (in 'latent_strength_ssm_gq', line 132, column 8 to line 137, column 9)",
  " (in 'latent_strength_ssm_gq', line 130, column 13 to line 138, column 7)",
  " (in 'latent_strength_ssm_gq', line 115, column 8 to column 107)",
  " (in 'latent_strength_ssm_gq', line 120, column 10 to line 121, column 77)",
  " (in 'latent_strength_ssm_gq', line 123, column 19 to column 30)",
  " (in 'latent_strength_ssm_gq', line 123, column 12 to column 39)",
  " (in 'latent_strength_ssm_gq', line 124, column 39 to column 68)",
  " (in 'latent_strength_ssm_gq', line 124, column 12 to column 68)",
  " (in 'latent_strength_ssm_gq', line 125, column 19 to column 26)",
  " (in 'latent_strength_ssm_gq', line 125, column 12 to column 64)",
  " (in 'latent_strength_ssm_gq', line 126, column 12 to column 86)",
  " (in 'latent_strength_ssm_gq', line 122, column 10 to line 127, column 11)",
  " (in 'latent_strength_ssm_gq', line 119, column 15 to line 128, column 9)",
  " (in 'latent_strength_ssm_gq', line 117, column 10 to column 53)",
  " (in 'latent_strength_ssm_gq', line 118, column 10 to column 49)",
  " (in 'latent_strength_ssm_gq', line 116, column 40 to line 119, column 9)",
  " (in 'latent_strength_ssm_gq', line 116, column 8 to line 128, column 9)",
  " (in 'latent_strength_ssm_gq', line 129, column 8 to column 35)",
  " (in 'latent_strength_ssm_gq', line 114, column 25 to line 130, column 7)",
  " (in 'latent_strength_ssm_gq', line 114, column 6 to line 138, column 7)",
  " (in 'latent_strength_ssm_gq', line 139, column 6 to column 43)",
  " (in 'latent_strength_ssm_gq', line 140, column 6 to column 44)",
  " (in 'latent_strength_ssm_gq', line 141, column 6 to column 48)",
  " (in 'latent_strength_ssm_gq', line 108, column 33 to line 142, column 5)",
  " (in 'latent_strength_ssm_gq', line 108, column 4 to line 142, column 5)",
  " (in 'latent_strength_ssm_gq', line 103, column 2 to line 143, column 3)",
  " (in 'latent_strength_ssm_gq', line 148, column 4 to column 30)",
  " (in 'latent_strength_ssm_gq', line 149, column 4 to column 28)",
  " (in 'latent_strength_ssm_gq', line 150, column 4 to column 29)",
  " (in 'latent_strength_ssm_gq', line 151, column 4 to column 29)",
  " (in 'latent_strength_ssm_gq', line 154, column 11 to column 18)",
  " (in 'latent_strength_ssm_gq', line 154, column 4 to column 30)",
  " (in 'latent_strength_ssm_gq', line 155, column 4 to column 18)",
  " (in 'latent_strength_ssm_gq', line 169, column 8 to column 86)",
  " (in 'latent_strength_ssm_gq', line 168, column 13 to line 170, column 7)",
  " (in 'latent_strength_ssm_gq', line 167, column 8 to column 86)",
  " (in 'latent_strength_ssm_gq', line 166, column 37 to line 168, column 7)",
  " (in 'latent_strength_ssm_gq', line 166, column 6 to line 170, column 7)",
  " (in 'latent_strength_ssm_gq', line 171, column 6 to column 43)",
  " (in 'latent_strength_ssm_gq', line 164, column 11 to line 172, column 5)",
  " (in 'latent_strength_ssm_gq', line 160, column 6 to column 30)",
  " (in 'latent_strength_ssm_gq', line 161, column 6 to column 65)",
  " (in 'latent_strength_ssm_gq', line 162, column 6 to column 47)",
  " (in 'latent_strength_ssm_gq', line 163, column 6 to column 44)",
  " (in 'latent_strength_ssm_gq', line 159, column 35 to line 164, column 5)",
  " (in 'latent_strength_ssm_gq', line 159, column 11 to line 172, column 5)",
  " (in 'latent_strength_ssm_gq', line 157, column 6 to column 35)",
  " (in 'latent_strength_ssm_gq', line 158, column 6 to column 73)",
  " (in 'latent_strength_ssm_gq', line 156, column 22 to line 159, column 5)",
  " (in 'latent_strength_ssm_gq', line 156, column 4 to line 172, column 5)",
  " (in 'latent_strength_ssm_gq', line 174, column 6 to column 68)",
  " (in 'latent_strength_ssm_gq', line 175, column 6 to column 22)",
  " (in 'latent_strength_ssm_gq', line 176, column 6 to column 44)",
  " (in 'latent_strength_ssm_gq', line 173, column 4 to line 177, column 5)",
  " (in 'latent_strength_ssm_gq', line 147, column 21 to line 178, column 3)",
  " (in 'latent_strength_ssm_gq', line 147, column 2 to line 178, column 3)",
  " (in 'latent_strength_ssm_gq', line 3, column 2 to column 23)",
  " (in 'latent_strength_ssm_gq', line 4, column 2 to column 23)",
  " (in 'latent_strength_ssm_gq', line 5, column 2 to column 25)",
  " (in 'latent_strength_ssm_gq', line 6, column 2 to column 23)",
  " (in 'latent_strength_ssm_gq', line 7, column 8 to column 15)",
  " (in 'latent_strength_ssm_gq', line 7, column 2 to column 55)",
  " (in 'latent_strength_ssm_gq', line 8, column 8 to column 15)",
  " (in 'latent_strength_ssm_gq', line 8, column 2 to column 55)",
  " (in 'latent_strength_ssm_gq', line 9, column 8 to column 15)",
  " (in 'latent_strength_ssm_gq', line 9, column 2 to column 58)",
  " (in 'latent_strength_ssm_gq', line 10, column 8 to column 15)",
  " (in 'latent_strength_ssm_gq', line 10, column 2 to column 54)",
  " (in 'latent_strength_ssm_gq', line 11, column 8 to column 15)",
  " (in 'latent_strength_ssm_gq', line 11, column 2 to column 53)",
  " (in 'latent_strength_ssm_gq', line 12, column 8 to column 15)",
  " (in 'latent_strength_ssm_gq', line 12, column 2 to column 53)",
  " (in 'latent_strength_ssm_gq', line 13, column 8 to column 15)",
  " (in 'latent_strength_ssm_gq', line 13, column 2 to column 43)",
  " (in 'latent_strength_ssm_gq', line 15, column 2 to column 21)",
  " (in 'latent_strength_ssm_gq', line 16, column 8 to column 13)",
  " (in 'latent_strength_ssm_gq', line 16, column 2 to column 57)",
  " (in 'latent_strength_ssm_gq', line 17, column 8 to column 13)",
  " (in 'latent_strength_ssm_gq', line 17, column 2 to column 57)",
  " (in 'latent_strength_ssm_gq', line 19, column 8 to column 13)",
  " (in 'latent_strength_ssm_gq', line 19, column 2 to column 43)",
  " (in 'latent_strength_ssm_gq', line 21, column 8 to column 13)",
  " (in 'latent_strength_ssm_gq', line 21, column 2 to column 41)",
  " (in 'latent_strength_ssm_gq', line 22, column 8 to column 13)",
  " (in 'latent_strength_ssm_gq', line 22, column 2 to column 45)",
  " (in 'latent_strength_ssm_gq', line 26, column 2 to column 30)",
  " (in 'latent_strength_ssm_gq', line 27, column 8 to column 22)",
  " (in 'latent_strength_ssm_gq', line 27, column 2 to column 67)",
  " (in 'latent_strength_ssm_gq', line 29, column 8 to column 22)",
  " (in 'latent_strength_ssm_gq', line 29, column 2 to column 59)",
  " (in 'latent_strength_ssm_gq', line 33, column 8 to column 15)",
  " (in 'latent_strength_ssm_gq', line 33, column 2 to column 60)",
  " (in 'latent_strength_ssm_gq', line 34, column 8 to column 15)",
  " (in 'latent_strength_ssm_gq', line 34, column 2 to column 59)",
  " (in 'latent_strength_ssm_gq', line 35, column 8 to column 15)",
  " (in 'latent_strength_ssm_gq', line 35, column 2 to column 58)",
  " (in 'latent_strength_ssm_gq', line 39, column 4 to column 24)",
  " (in 'latent_strength_ssm_gq', line 40, column 4 to column 26)",
  " (in 'latent_strength_ssm_gq', line 41, column 31 to column 53)",
  " (in 'latent_strength_ssm_gq', line 41, column 4 to column 53)",
  " (in 'latent_strength_ssm_gq', line 42, column 31 to column 52)",
  " (in 'latent_strength_ssm_gq', line 42, column 4 to column 52)",
  " (in 'latent_strength_ssm_gq', line 43, column 31 to column 51)",
  " (in 'latent_strength_ssm_gq', line 43, column 4 to column 51)",
  " (in 'latent_strength_ssm_gq', line 38, column 23 to line 44, column 3)",
  " (in 'latent_strength_ssm_gq', line 38, column 2 to line 44, column 3)",
  " (in 'latent_strength_ssm_gq', line 45, column 2 to column 23)",
  " (in 'latent_strength_ssm_gq', line 47, column 2 to column 60)",
  " (in 'latent_strength_ssm_gq', line 52, column 9 to column 22)",
  " (in 'latent_strength_ssm_gq', line 55, column 8 to column 17)",
  " (in 'latent_strength_ssm_gq', line 55, column 38 to column 45)",
  " (in 'latent_strength_ssm_gq', line 57, column 21 to column 28)",
  " (in 'latent_strength_ssm_gq', line 59, column 8 to column 19)",
  " (in 'latent_strength_ssm_gq', line 59, column 40 to column 47)",
  " (in 'latent_strength_ssm_gq', line 62, column 8 to column 21)",
  " (in 'latent_strength_ssm_gq', line 62, column 42 to column 49)",
  " (in 'latent_strength_ssm_gq', line 68, column 9 to column 18)",
  " (in 'latent_strength_ssm_gq', line 69, column 8 to column 17)",
  " (in 'latent_strength_ssm_gq', line 69, column 26 to column 33)",
  " (in 'latent_strength_ssm_gq', line 70, column 8 to column 15)",
  " (in 'latent_strength_ssm_gq', line 70, column 24 to column 31)",
  " (in 'latent_strength_ssm_gq', line 96, column 9 to column 16)",
  " (in 'latent_strength_ssm_gq', line 97, column 9 to column 16)",
  " (in 'latent_strength_ssm_gq', line 100, column 8 to column 22)",
  " (in 'latent_strength_ssm_gq', line 100, column 31 to column 38)",
  " (in 'latent_strength_ssm_gq', line 101, column 8 to column 22)",
  " (in 'latent_strength_ssm_gq', line 101, column 31 to column 38)",
  " (in 'latent_strength_ssm_gq', line 102, column 9 to column 23)",
  " (in 'latent_strength_ssm_gq', line 145, column 9 to column 14)",
  " (in 'latent_strength_ssm_gq', line 146, column 9 to column 14)"};
#include <stan_meta_header.hpp>
class model_latent_strength_ssm_gq final : public model_base_crtp<model_latent_strength_ssm_gq> {
private:
  int N_games;
  int N_teams;
  int N_seasons;
  int N_weeks;
  std::vector<int> home_team;
  std::vector<int> away_team;
  std::vector<int> season_idx;
  std::vector<int> week_idx;
  std::vector<int> fw_season_idx;
  std::vector<int> lw_season_idx;
  std::vector<int> hfa;
  int N_oos;
  std::vector<int> oos_home_team;
  std::vector<int> oos_away_team;
  std::vector<int> oos_season_idx;
  std::vector<int> oos_week_idx;
  std::vector<int> oos_hfa;
  int N_future_weeks;
  std::vector<int> future_is_first_week;
  std::vector<int> future_week_to_season;
  std::vector<int> week_to_season;
  std::vector<int> is_first_week;
  std::vector<int> is_last_week;
  double sum_to_zero_scale;
  int z_league_hfa_innovation_1dim__;
  int z_weekly_team_strength_innovation_1dim__;
  int z_season_team_strength_innovation_1dim__;
public:
  ~model_latent_strength_ssm_gq() {}
  model_latent_strength_ssm_gq(stan::io::var_context& context__, unsigned int
                               random_seed__ = 0, std::ostream*
                               pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    using local_scalar_t__ = double;
    auto base_rng__ = stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_latent_strength_ssm_gq_namespace::model_latent_strength_ssm_gq";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 118;
      context__.validate_dims("data initialization", "N_games", "int",
        std::vector<size_t>{});
      N_games = std::numeric_limits<int>::min();
      current_statement__ = 118;
      N_games = context__.vals_i("N_games")[(1 - 1)];
      current_statement__ = 118;
      stan::math::check_greater_or_equal(function__, "N_games", N_games, 1);
      current_statement__ = 119;
      context__.validate_dims("data initialization", "N_teams", "int",
        std::vector<size_t>{});
      N_teams = std::numeric_limits<int>::min();
      current_statement__ = 119;
      N_teams = context__.vals_i("N_teams")[(1 - 1)];
      current_statement__ = 119;
      stan::math::check_greater_or_equal(function__, "N_teams", N_teams, 2);
      current_statement__ = 120;
      context__.validate_dims("data initialization", "N_seasons", "int",
        std::vector<size_t>{});
      N_seasons = std::numeric_limits<int>::min();
      current_statement__ = 120;
      N_seasons = context__.vals_i("N_seasons")[(1 - 1)];
      current_statement__ = 120;
      stan::math::check_greater_or_equal(function__, "N_seasons", N_seasons,
        1);
      current_statement__ = 121;
      context__.validate_dims("data initialization", "N_weeks", "int",
        std::vector<size_t>{});
      N_weeks = std::numeric_limits<int>::min();
      current_statement__ = 121;
      N_weeks = context__.vals_i("N_weeks")[(1 - 1)];
      current_statement__ = 121;
      stan::math::check_greater_or_equal(function__, "N_weeks", N_weeks, 1);
      current_statement__ = 122;
      stan::math::validate_non_negative_index("home_team", "N_games", N_games);
      current_statement__ = 123;
      context__.validate_dims("data initialization", "home_team", "int",
        std::vector<size_t>{static_cast<size_t>(N_games)});
      home_team = std::vector<int>(N_games, std::numeric_limits<int>::min());
      current_statement__ = 123;
      home_team = context__.vals_i("home_team");
      current_statement__ = 123;
      stan::math::check_greater_or_equal(function__, "home_team", home_team,
        1);
      current_statement__ = 123;
      stan::math::check_less_or_equal(function__, "home_team", home_team,
        N_teams);
      current_statement__ = 124;
      stan::math::validate_non_negative_index("away_team", "N_games", N_games);
      current_statement__ = 125;
      context__.validate_dims("data initialization", "away_team", "int",
        std::vector<size_t>{static_cast<size_t>(N_games)});
      away_team = std::vector<int>(N_games, std::numeric_limits<int>::min());
      current_statement__ = 125;
      away_team = context__.vals_i("away_team");
      current_statement__ = 125;
      stan::math::check_greater_or_equal(function__, "away_team", away_team,
        1);
      current_statement__ = 125;
      stan::math::check_less_or_equal(function__, "away_team", away_team,
        N_teams);
      current_statement__ = 126;
      stan::math::validate_non_negative_index("season_idx", "N_games",
        N_games);
      current_statement__ = 127;
      context__.validate_dims("data initialization", "season_idx", "int",
        std::vector<size_t>{static_cast<size_t>(N_games)});
      season_idx = std::vector<int>(N_games, std::numeric_limits<int>::min());
      current_statement__ = 127;
      season_idx = context__.vals_i("season_idx");
      current_statement__ = 127;
      stan::math::check_greater_or_equal(function__, "season_idx",
        season_idx, 1);
      current_statement__ = 127;
      stan::math::check_less_or_equal(function__, "season_idx", season_idx,
        N_seasons);
      current_statement__ = 128;
      stan::math::validate_non_negative_index("week_idx", "N_games", N_games);
      current_statement__ = 129;
      context__.validate_dims("data initialization", "week_idx", "int",
        std::vector<size_t>{static_cast<size_t>(N_games)});
      week_idx = std::vector<int>(N_games, std::numeric_limits<int>::min());
      current_statement__ = 129;
      week_idx = context__.vals_i("week_idx");
      current_statement__ = 129;
      stan::math::check_greater_or_equal(function__, "week_idx", week_idx, 1);
      current_statement__ = 129;
      stan::math::check_less_or_equal(function__, "week_idx", week_idx,
        N_weeks);
      current_statement__ = 130;
      stan::math::validate_non_negative_index("fw_season_idx", "N_games",
        N_games);
      current_statement__ = 131;
      context__.validate_dims("data initialization", "fw_season_idx", "int",
        std::vector<size_t>{static_cast<size_t>(N_games)});
      fw_season_idx = std::vector<int>(N_games,
                        std::numeric_limits<int>::min());
      current_statement__ = 131;
      fw_season_idx = context__.vals_i("fw_season_idx");
      current_statement__ = 131;
      stan::math::check_greater_or_equal(function__, "fw_season_idx",
        fw_season_idx, 0);
      current_statement__ = 131;
      stan::math::check_less_or_equal(function__, "fw_season_idx",
        fw_season_idx, 1);
      current_statement__ = 132;
      stan::math::validate_non_negative_index("lw_season_idx", "N_games",
        N_games);
      current_statement__ = 133;
      context__.validate_dims("data initialization", "lw_season_idx", "int",
        std::vector<size_t>{static_cast<size_t>(N_games)});
      lw_season_idx = std::vector<int>(N_games,
                        std::numeric_limits<int>::min());
      current_statement__ = 133;
      lw_season_idx = context__.vals_i("lw_season_idx");
      current_statement__ = 133;
      stan::math::check_greater_or_equal(function__, "lw_season_idx",
        lw_season_idx, 0);
      current_statement__ = 133;
      stan::math::check_less_or_equal(function__, "lw_season_idx",
        lw_season_idx, 1);
      current_statement__ = 134;
      stan::math::validate_non_negative_index("hfa", "N_games", N_games);
      current_statement__ = 135;
      context__.validate_dims("data initialization", "hfa", "int",
        std::vector<size_t>{static_cast<size_t>(N_games)});
      hfa = std::vector<int>(N_games, std::numeric_limits<int>::min());
      current_statement__ = 135;
      hfa = context__.vals_i("hfa");
      current_statement__ = 135;
      stan::math::check_greater_or_equal(function__, "hfa", hfa, 0);
      current_statement__ = 135;
      stan::math::check_less_or_equal(function__, "hfa", hfa, 1);
      current_statement__ = 136;
      context__.validate_dims("data initialization", "N_oos", "int",
        std::vector<size_t>{});
      N_oos = std::numeric_limits<int>::min();
      current_statement__ = 136;
      N_oos = context__.vals_i("N_oos")[(1 - 1)];
      current_statement__ = 136;
      stan::math::check_greater_or_equal(function__, "N_oos", N_oos, 0);
      current_statement__ = 137;
      stan::math::validate_non_negative_index("oos_home_team", "N_oos", N_oos);
      current_statement__ = 138;
      context__.validate_dims("data initialization", "oos_home_team", "int",
        std::vector<size_t>{static_cast<size_t>(N_oos)});
      oos_home_team = std::vector<int>(N_oos,
                        std::numeric_limits<int>::min());
      current_statement__ = 138;
      oos_home_team = context__.vals_i("oos_home_team");
      current_statement__ = 138;
      stan::math::check_greater_or_equal(function__, "oos_home_team",
        oos_home_team, 1);
      current_statement__ = 138;
      stan::math::check_less_or_equal(function__, "oos_home_team",
        oos_home_team, N_teams);
      current_statement__ = 139;
      stan::math::validate_non_negative_index("oos_away_team", "N_oos", N_oos);
      current_statement__ = 140;
      context__.validate_dims("data initialization", "oos_away_team", "int",
        std::vector<size_t>{static_cast<size_t>(N_oos)});
      oos_away_team = std::vector<int>(N_oos,
                        std::numeric_limits<int>::min());
      current_statement__ = 140;
      oos_away_team = context__.vals_i("oos_away_team");
      current_statement__ = 140;
      stan::math::check_greater_or_equal(function__, "oos_away_team",
        oos_away_team, 1);
      current_statement__ = 140;
      stan::math::check_less_or_equal(function__, "oos_away_team",
        oos_away_team, N_teams);
      current_statement__ = 141;
      stan::math::validate_non_negative_index("oos_season_idx", "N_oos",
        N_oos);
      current_statement__ = 142;
      context__.validate_dims("data initialization", "oos_season_idx", "int",
        std::vector<size_t>{static_cast<size_t>(N_oos)});
      oos_season_idx = std::vector<int>(N_oos,
                         std::numeric_limits<int>::min());
      current_statement__ = 142;
      oos_season_idx = context__.vals_i("oos_season_idx");
      current_statement__ = 142;
      stan::math::check_greater_or_equal(function__, "oos_season_idx",
        oos_season_idx, 1);
      current_statement__ = 143;
      stan::math::validate_non_negative_index("oos_week_idx", "N_oos", N_oos);
      current_statement__ = 144;
      context__.validate_dims("data initialization", "oos_week_idx", "int",
        std::vector<size_t>{static_cast<size_t>(N_oos)});
      oos_week_idx = std::vector<int>(N_oos, std::numeric_limits<int>::min());
      current_statement__ = 144;
      oos_week_idx = context__.vals_i("oos_week_idx");
      current_statement__ = 144;
      stan::math::check_greater_or_equal(function__, "oos_week_idx",
        oos_week_idx, 1);
      current_statement__ = 145;
      stan::math::validate_non_negative_index("oos_hfa", "N_oos", N_oos);
      current_statement__ = 146;
      context__.validate_dims("data initialization", "oos_hfa", "int",
        std::vector<size_t>{static_cast<size_t>(N_oos)});
      oos_hfa = std::vector<int>(N_oos, std::numeric_limits<int>::min());
      current_statement__ = 146;
      oos_hfa = context__.vals_i("oos_hfa");
      current_statement__ = 146;
      stan::math::check_greater_or_equal(function__, "oos_hfa", oos_hfa, 0);
      current_statement__ = 146;
      stan::math::check_less_or_equal(function__, "oos_hfa", oos_hfa, 1);
      current_statement__ = 147;
      context__.validate_dims("data initialization", "N_future_weeks", "int",
        std::vector<size_t>{});
      N_future_weeks = std::numeric_limits<int>::min();
      current_statement__ = 147;
      N_future_weeks = context__.vals_i("N_future_weeks")[(1 - 1)];
      current_statement__ = 147;
      stan::math::check_greater_or_equal(function__, "N_future_weeks",
        N_future_weeks, 0);
      current_statement__ = 148;
      stan::math::validate_non_negative_index("future_is_first_week",
        "N_future_weeks", N_future_weeks);
      current_statement__ = 149;
      context__.validate_dims("data initialization", "future_is_first_week",
        "int", std::vector<size_t>{static_cast<size_t>(N_future_weeks)});
      future_is_first_week = std::vector<int>(N_future_weeks,
                               std::numeric_limits<int>::min());
      current_statement__ = 149;
      future_is_first_week = context__.vals_i("future_is_first_week");
      current_statement__ = 149;
      stan::math::check_greater_or_equal(function__, "future_is_first_week",
        future_is_first_week, 0);
      current_statement__ = 149;
      stan::math::check_less_or_equal(function__, "future_is_first_week",
        future_is_first_week, 1);
      current_statement__ = 150;
      stan::math::validate_non_negative_index("future_week_to_season",
        "N_future_weeks", N_future_weeks);
      current_statement__ = 151;
      context__.validate_dims("data initialization", "future_week_to_season",
        "int", std::vector<size_t>{static_cast<size_t>(N_future_weeks)});
      future_week_to_season = std::vector<int>(N_future_weeks,
                                std::numeric_limits<int>::min());
      current_statement__ = 151;
      future_week_to_season = context__.vals_i("future_week_to_season");
      current_statement__ = 151;
      stan::math::check_greater_or_equal(function__, "future_week_to_season",
        future_week_to_season, 1);
      current_statement__ = 152;
      stan::math::validate_non_negative_index("week_to_season", "N_weeks",
        N_weeks);
      current_statement__ = 153;
      week_to_season = std::vector<int>(N_weeks,
                         std::numeric_limits<int>::min());
      current_statement__ = 153;
      stan::model::assign(week_to_season, stan::math::rep_array(1, N_weeks),
        "assigning variable week_to_season");
      current_statement__ = 154;
      stan::math::validate_non_negative_index("is_first_week", "N_weeks",
        N_weeks);
      current_statement__ = 155;
      is_first_week = std::vector<int>(N_weeks,
                        std::numeric_limits<int>::min());
      current_statement__ = 155;
      stan::model::assign(is_first_week, stan::math::rep_array(0, N_weeks),
        "assigning variable is_first_week");
      current_statement__ = 156;
      stan::math::validate_non_negative_index("is_last_week", "N_weeks",
        N_weeks);
      current_statement__ = 157;
      is_last_week = std::vector<int>(N_weeks,
                       std::numeric_limits<int>::min());
      current_statement__ = 157;
      stan::model::assign(is_last_week, stan::math::rep_array(0, N_weeks),
        "assigning variable is_last_week");
      current_statement__ = 167;
      for (int g = 1; g <= N_games; ++g) {
        int w = std::numeric_limits<int>::min();
        current_statement__ = 158;
        w = stan::model::rvalue(week_idx, "week_idx",
              stan::model::index_uni(g));
        int s = std::numeric_limits<int>::min();
        current_statement__ = 159;
        s = stan::model::rvalue(season_idx, "season_idx",
              stan::model::index_uni(g));
        current_statement__ = 161;
        if (stan::math::logical_gt(s,
              stan::model::rvalue(week_to_season, "week_to_season",
                stan::model::index_uni(w)))) {
          current_statement__ = 160;
          stan::model::assign(week_to_season, s,
            "assigning variable week_to_season", stan::model::index_uni(w));
        }
        current_statement__ = 163;
        if (stan::math::logical_eq(
              stan::model::rvalue(fw_season_idx, "fw_season_idx",
                stan::model::index_uni(g)), 1)) {
          current_statement__ = 162;
          stan::model::assign(is_first_week, 1,
            "assigning variable is_first_week", stan::model::index_uni(w));
        }
        current_statement__ = 165;
        if (stan::math::logical_eq(
              stan::model::rvalue(lw_season_idx, "lw_season_idx",
                stan::model::index_uni(g)), 1)) {
          current_statement__ = 164;
          stan::model::assign(is_last_week, 1,
            "assigning variable is_last_week", stan::model::index_uni(w));
        }
      }
      current_statement__ = 168;
      stan::model::assign(is_first_week, 1,
        "assigning variable is_first_week", stan::model::index_uni(1));
      current_statement__ = 169;
      sum_to_zero_scale = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 169;
      sum_to_zero_scale = stan::math::sqrt((N_teams *
                            stan::math::inv((N_teams - 1))));
      current_statement__ = 170;
      z_league_hfa_innovation_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 170;
      z_league_hfa_innovation_1dim__ = (N_seasons - 1);
      current_statement__ = 170;
      stan::math::validate_non_negative_index("z_league_hfa_innovation",
        "N_seasons - 1", z_league_hfa_innovation_1dim__);
      current_statement__ = 171;
      stan::math::validate_non_negative_index("z_team_hfa_deviation",
        "N_seasons", N_seasons);
      current_statement__ = 172;
      stan::math::validate_non_negative_index("z_team_hfa_deviation",
        "N_teams", N_teams);
      current_statement__ = 173;
      stan::math::validate_non_negative_index("z_team_strength_init",
        "N_teams", N_teams);
      current_statement__ = 174;
      z_weekly_team_strength_innovation_1dim__ = std::numeric_limits<int>::min(
                                                   );
      current_statement__ = 174;
      z_weekly_team_strength_innovation_1dim__ = (N_weeks - 1);
      current_statement__ = 174;
      stan::math::validate_non_negative_index(
        "z_weekly_team_strength_innovation", "N_weeks - 1",
        z_weekly_team_strength_innovation_1dim__);
      current_statement__ = 175;
      stan::math::validate_non_negative_index(
        "z_weekly_team_strength_innovation", "N_teams", N_teams);
      current_statement__ = 176;
      z_season_team_strength_innovation_1dim__ = std::numeric_limits<int>::min(
                                                   );
      current_statement__ = 176;
      z_season_team_strength_innovation_1dim__ = (N_seasons - 1);
      current_statement__ = 176;
      stan::math::validate_non_negative_index(
        "z_season_team_strength_innovation", "N_seasons - 1",
        z_season_team_strength_innovation_1dim__);
      current_statement__ = 177;
      stan::math::validate_non_negative_index(
        "z_season_team_strength_innovation", "N_teams", N_teams);
      current_statement__ = 178;
      stan::math::validate_non_negative_index("league_hfa", "N_seasons",
        N_seasons);
      current_statement__ = 179;
      stan::math::validate_non_negative_index("team_hfa", "N_seasons",
        N_seasons);
      current_statement__ = 180;
      stan::math::validate_non_negative_index("team_hfa", "N_teams", N_teams);
      current_statement__ = 181;
      stan::math::validate_non_negative_index("team_strength", "N_weeks",
        N_weeks);
      current_statement__ = 182;
      stan::math::validate_non_negative_index("team_strength", "N_teams",
        N_teams);
      current_statement__ = 183;
      stan::math::validate_non_negative_index("filtered_team_strength_last",
        "N_teams", N_teams);
      current_statement__ = 184;
      stan::math::validate_non_negative_index("filtered_team_hfa_last",
        "N_teams", N_teams);
      current_statement__ = 185;
      stan::math::validate_non_negative_index("predicted_team_strength",
        "N_future_weeks", N_future_weeks);
      current_statement__ = 186;
      stan::math::validate_non_negative_index("predicted_team_strength",
        "N_teams", N_teams);
      current_statement__ = 187;
      stan::math::validate_non_negative_index("predicted_team_hfa",
        "N_future_weeks", N_future_weeks);
      current_statement__ = 188;
      stan::math::validate_non_negative_index("predicted_team_hfa",
        "N_teams", N_teams);
      current_statement__ = 189;
      stan::math::validate_non_negative_index("predicted_league_hfa",
        "N_future_weeks", N_future_weeks);
      current_statement__ = 190;
      stan::math::validate_non_negative_index("mu_pred", "N_oos", N_oos);
      current_statement__ = 191;
      stan::math::validate_non_negative_index("y_pred", "N_oos", N_oos);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + z_league_hfa_innovation_1dim__ + 1 + 1 + (N_seasons
      * (N_teams - 1)) + 1 + (N_teams - 1) + 1 +
      (z_weekly_team_strength_innovation_1dim__ * (N_teams - 1)) + 1 + 1 +
      (z_season_team_strength_innovation_1dim__ * (N_teams - 1)) + 1 + 1 + 1;
  }
  inline std::string model_name() const final {
    return "model_latent_strength_ssm_gq";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.37.0-61-g7c641b3",
             "stancflags = --allow-undefined"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_latent_strength_ssm_gq_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      current_statement__ = 1;
      auto league_hfa_init = in__.template read<local_scalar_t__>();
      current_statement__ = 2;
      auto z_league_hfa_innovation =
        in__.template read<
          Eigen::Matrix<local_scalar_t__,-1,1>>(z_league_hfa_innovation_1dim__);
      current_statement__ = 3;
      auto sigma_league_hfa_innovation =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 4;
      auto phi_league_hfa =
        in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0, 1,
          lp__);
      current_statement__ = 5;
      auto z_team_hfa_deviation =
        in__.template read_constrain_sum_to_zero<
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
          jacobian__>(lp__, N_seasons, N_teams);
      current_statement__ = 6;
      auto sigma_team_hfa =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 7;
      auto z_team_strength_init =
        in__.template read_constrain_sum_to_zero<
          Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__, N_teams);
      current_statement__ = 8;
      auto sigma_team_strength_init =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 9;
      auto z_weekly_team_strength_innovation =
        in__.template read_constrain_sum_to_zero<
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
          jacobian__>(lp__, z_weekly_team_strength_innovation_1dim__,
          N_teams);
      current_statement__ = 10;
      auto sigma_weekly_team_strength_innovation =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 11;
      auto phi_weekly_team_strength_innovation =
        in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0, 1,
          lp__);
      current_statement__ = 12;
      auto z_season_team_strength_innovation =
        in__.template read_constrain_sum_to_zero<
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
          jacobian__>(lp__, z_season_team_strength_innovation_1dim__,
          N_teams);
      current_statement__ = 13;
      auto sigma_season_team_strength_innovation =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 14;
      auto phi_season_team_strength_innovation =
        in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0, 1,
          lp__);
      current_statement__ = 15;
      auto sigma_obs =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> league_hfa =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_seasons,
          DUMMY_VAR__);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> team_hfa =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N_seasons,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_teams,
            DUMMY_VAR__));
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> team_strength =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N_weeks,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_teams,
            DUMMY_VAR__));
      current_statement__ = 29;
      stan::model::assign(league_hfa, league_hfa_init,
        "assigning variable league_hfa", stan::model::index_uni(1));
      current_statement__ = 31;
      for (int s = 2; s <= N_seasons; ++s) {
        current_statement__ = 30;
        stan::model::assign(league_hfa, ((phi_league_hfa *
          stan::model::rvalue(league_hfa, "league_hfa",
            stan::model::index_uni((s - 1)))) +
          (stan::model::rvalue(z_league_hfa_innovation,
             "z_league_hfa_innovation", stan::model::index_uni((s - 1))) *
          sigma_league_hfa_innovation)), "assigning variable league_hfa",
          stan::model::index_uni(s));
      }
      current_statement__ = 33;
      for (int s = 1; s <= N_seasons; ++s) {
        current_statement__ = 32;
        stan::model::assign(team_hfa,
          stan::math::add(
            stan::math::rep_vector(
              stan::model::rvalue(league_hfa, "league_hfa",
                stan::model::index_uni(s)), N_teams),
            stan::math::multiply(
              stan::math::to_vector(
                stan::model::rvalue(z_team_hfa_deviation,
                  "z_team_hfa_deviation", stan::model::index_uni(s))),
              sigma_team_hfa)), "assigning variable team_hfa",
          stan::model::index_uni(s));
      }
      current_statement__ = 34;
      stan::model::assign(team_strength,
        stan::math::multiply(stan::math::to_vector(z_team_strength_init),
          sigma_team_strength_init), "assigning variable team_strength",
        stan::model::index_uni(1));
      current_statement__ = 42;
      for (int w = 2; w <= N_weeks; ++w) {
        current_statement__ = 40;
        if (stan::math::logical_eq(
              stan::model::rvalue(is_first_week, "is_first_week",
                stan::model::index_uni(w)), 1)) {
          int s = std::numeric_limits<int>::min();
          current_statement__ = 37;
          s = stan::model::rvalue(week_to_season, "week_to_season",
                stan::model::index_uni(w));
          current_statement__ = 38;
          stan::model::assign(team_strength,
            stan::math::add(
              stan::math::multiply(phi_season_team_strength_innovation,
                stan::model::deep_copy(
                  stan::model::rvalue(team_strength, "team_strength",
                    stan::model::index_uni((w - 1))))),
              stan::math::multiply(
                stan::math::to_vector(
                  stan::model::rvalue(z_season_team_strength_innovation,
                    "z_season_team_strength_innovation",
                    stan::model::index_uni((s - 1)))),
                sigma_season_team_strength_innovation)),
            "assigning variable team_strength", stan::model::index_uni(w));
        } else {
          current_statement__ = 35;
          stan::model::assign(team_strength,
            stan::math::add(
              stan::math::multiply(phi_weekly_team_strength_innovation,
                stan::model::deep_copy(
                  stan::model::rvalue(team_strength, "team_strength",
                    stan::model::index_uni((w - 1))))),
              stan::math::multiply(
                stan::math::to_vector(
                  stan::model::rvalue(z_weekly_team_strength_innovation,
                    "z_weekly_team_strength_innovation",
                    stan::model::index_uni((w - 1)))),
                sigma_weekly_team_strength_innovation)),
            "assigning variable team_strength", stan::model::index_uni(w));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_latent_strength_ssm_gq_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      current_statement__ = 1;
      auto league_hfa_init = in__.template read<local_scalar_t__>();
      current_statement__ = 2;
      auto z_league_hfa_innovation =
        in__.template read<
          Eigen::Matrix<local_scalar_t__,-1,1>>(z_league_hfa_innovation_1dim__);
      current_statement__ = 3;
      auto sigma_league_hfa_innovation =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 4;
      auto phi_league_hfa =
        in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0, 1,
          lp__);
      current_statement__ = 5;
      auto z_team_hfa_deviation =
        in__.template read_constrain_sum_to_zero<
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
          jacobian__>(lp__, N_seasons, N_teams);
      current_statement__ = 6;
      auto sigma_team_hfa =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 7;
      auto z_team_strength_init =
        in__.template read_constrain_sum_to_zero<
          Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__, N_teams);
      current_statement__ = 8;
      auto sigma_team_strength_init =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 9;
      auto z_weekly_team_strength_innovation =
        in__.template read_constrain_sum_to_zero<
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
          jacobian__>(lp__, z_weekly_team_strength_innovation_1dim__,
          N_teams);
      current_statement__ = 10;
      auto sigma_weekly_team_strength_innovation =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 11;
      auto phi_weekly_team_strength_innovation =
        in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0, 1,
          lp__);
      current_statement__ = 12;
      auto z_season_team_strength_innovation =
        in__.template read_constrain_sum_to_zero<
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
          jacobian__>(lp__, z_season_team_strength_innovation_1dim__,
          N_teams);
      current_statement__ = 13;
      auto sigma_season_team_strength_innovation =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 14;
      auto phi_season_team_strength_innovation =
        in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0, 1,
          lp__);
      current_statement__ = 15;
      auto sigma_obs =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> league_hfa =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_seasons,
          DUMMY_VAR__);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> team_hfa =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N_seasons,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_teams,
            DUMMY_VAR__));
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> team_strength =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N_weeks,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_teams,
            DUMMY_VAR__));
      current_statement__ = 29;
      stan::model::assign(league_hfa, league_hfa_init,
        "assigning variable league_hfa", stan::model::index_uni(1));
      current_statement__ = 31;
      for (int s = 2; s <= N_seasons; ++s) {
        current_statement__ = 30;
        stan::model::assign(league_hfa, ((phi_league_hfa *
          stan::model::rvalue(league_hfa, "league_hfa",
            stan::model::index_uni((s - 1)))) +
          (stan::model::rvalue(z_league_hfa_innovation,
             "z_league_hfa_innovation", stan::model::index_uni((s - 1))) *
          sigma_league_hfa_innovation)), "assigning variable league_hfa",
          stan::model::index_uni(s));
      }
      current_statement__ = 33;
      for (int s = 1; s <= N_seasons; ++s) {
        current_statement__ = 32;
        stan::model::assign(team_hfa,
          stan::math::add(
            stan::math::rep_vector(
              stan::model::rvalue(league_hfa, "league_hfa",
                stan::model::index_uni(s)), N_teams),
            stan::math::multiply(
              stan::math::to_vector(
                stan::model::rvalue(z_team_hfa_deviation,
                  "z_team_hfa_deviation", stan::model::index_uni(s))),
              sigma_team_hfa)), "assigning variable team_hfa",
          stan::model::index_uni(s));
      }
      current_statement__ = 34;
      stan::model::assign(team_strength,
        stan::math::multiply(stan::math::to_vector(z_team_strength_init),
          sigma_team_strength_init), "assigning variable team_strength",
        stan::model::index_uni(1));
      current_statement__ = 42;
      for (int w = 2; w <= N_weeks; ++w) {
        current_statement__ = 40;
        if (stan::math::logical_eq(
              stan::model::rvalue(is_first_week, "is_first_week",
                stan::model::index_uni(w)), 1)) {
          int s = std::numeric_limits<int>::min();
          current_statement__ = 37;
          s = stan::model::rvalue(week_to_season, "week_to_season",
                stan::model::index_uni(w));
          current_statement__ = 38;
          stan::model::assign(team_strength,
            stan::math::add(
              stan::math::multiply(phi_season_team_strength_innovation,
                stan::model::deep_copy(
                  stan::model::rvalue(team_strength, "team_strength",
                    stan::model::index_uni((w - 1))))),
              stan::math::multiply(
                stan::math::to_vector(
                  stan::model::rvalue(z_season_team_strength_innovation,
                    "z_season_team_strength_innovation",
                    stan::model::index_uni((s - 1)))),
                sigma_season_team_strength_innovation)),
            "assigning variable team_strength", stan::model::index_uni(w));
        } else {
          current_statement__ = 35;
          stan::model::assign(team_strength,
            stan::math::add(
              stan::math::multiply(phi_weekly_team_strength_innovation,
                stan::model::deep_copy(
                  stan::model::rvalue(team_strength, "team_strength",
                    stan::model::index_uni((w - 1))))),
              stan::math::multiply(
                stan::math::to_vector(
                  stan::model::rvalue(z_weekly_team_strength_innovation,
                    "z_weekly_team_strength_innovation",
                    stan::model::index_uni((w - 1)))),
                sigma_weekly_team_strength_innovation)),
            "assigning variable team_strength", stan::model::index_uni(w));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "model_latent_strength_ssm_gq_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      current_statement__ = 1;
      auto league_hfa_init = in__.template read<local_scalar_t__>();
      current_statement__ = 2;
      auto z_league_hfa_innovation =
        in__.template read<
          Eigen::Matrix<local_scalar_t__,-1,1>>(z_league_hfa_innovation_1dim__);
      current_statement__ = 3;
      auto sigma_league_hfa_innovation =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 4;
      auto phi_league_hfa =
        in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0, 1,
          lp__);
      current_statement__ = 5;
      auto z_team_hfa_deviation =
        in__.template read_constrain_sum_to_zero<
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
          jacobian__>(lp__, N_seasons, N_teams);
      current_statement__ = 6;
      auto sigma_team_hfa =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 7;
      auto z_team_strength_init =
        in__.template read_constrain_sum_to_zero<
          Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__, N_teams);
      current_statement__ = 8;
      auto sigma_team_strength_init =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 9;
      auto z_weekly_team_strength_innovation =
        in__.template read_constrain_sum_to_zero<
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
          jacobian__>(lp__, z_weekly_team_strength_innovation_1dim__,
          N_teams);
      current_statement__ = 10;
      auto sigma_weekly_team_strength_innovation =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 11;
      auto phi_weekly_team_strength_innovation =
        in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0, 1,
          lp__);
      current_statement__ = 12;
      auto z_season_team_strength_innovation =
        in__.template read_constrain_sum_to_zero<
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
          jacobian__>(lp__, z_season_team_strength_innovation_1dim__,
          N_teams);
      current_statement__ = 13;
      auto sigma_season_team_strength_innovation =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 14;
      auto phi_season_team_strength_innovation =
        in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0, 1,
          lp__);
      current_statement__ = 15;
      auto sigma_obs =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      Eigen::Matrix<double,-1,1> league_hfa =
        Eigen::Matrix<double,-1,1>::Constant(N_seasons,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<Eigen::Matrix<double,-1,1>> team_hfa =
        std::vector<Eigen::Matrix<double,-1,1>>(N_seasons,
          Eigen::Matrix<double,-1,1>::Constant(N_teams,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double,-1,1>> team_strength =
        std::vector<Eigen::Matrix<double,-1,1>>(N_weeks,
          Eigen::Matrix<double,-1,1>::Constant(N_teams,
            std::numeric_limits<double>::quiet_NaN()));
      out__.write(league_hfa_init);
      out__.write(z_league_hfa_innovation);
      out__.write(sigma_league_hfa_innovation);
      out__.write(phi_league_hfa);
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_seasons; ++sym2__) {
          out__.write(z_team_hfa_deviation[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(sigma_team_hfa);
      out__.write(z_team_strength_init);
      out__.write(sigma_team_strength_init);
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
        for (int sym2__ = 1; sym2__ <=
             z_weekly_team_strength_innovation_1dim__; ++sym2__) {
          out__.write(z_weekly_team_strength_innovation[(sym2__ - 1)][(sym1__
            - 1)]);
        }
      }
      out__.write(sigma_weekly_team_strength_innovation);
      out__.write(phi_weekly_team_strength_innovation);
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
        for (int sym2__ = 1; sym2__ <=
             z_season_team_strength_innovation_1dim__; ++sym2__) {
          out__.write(z_season_team_strength_innovation[(sym2__ - 1)][(sym1__
            - 1)]);
        }
      }
      out__.write(sigma_season_team_strength_innovation);
      out__.write(phi_season_team_strength_innovation);
      out__.write(sigma_obs);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 29;
      stan::model::assign(league_hfa, league_hfa_init,
        "assigning variable league_hfa", stan::model::index_uni(1));
      current_statement__ = 31;
      for (int s = 2; s <= N_seasons; ++s) {
        current_statement__ = 30;
        stan::model::assign(league_hfa, ((phi_league_hfa *
          stan::model::rvalue(league_hfa, "league_hfa",
            stan::model::index_uni((s - 1)))) +
          (stan::model::rvalue(z_league_hfa_innovation,
             "z_league_hfa_innovation", stan::model::index_uni((s - 1))) *
          sigma_league_hfa_innovation)), "assigning variable league_hfa",
          stan::model::index_uni(s));
      }
      current_statement__ = 33;
      for (int s = 1; s <= N_seasons; ++s) {
        current_statement__ = 32;
        stan::model::assign(team_hfa,
          stan::math::add(
            stan::math::rep_vector(
              stan::model::rvalue(league_hfa, "league_hfa",
                stan::model::index_uni(s)), N_teams),
            stan::math::multiply(
              stan::math::to_vector(
                stan::model::rvalue(z_team_hfa_deviation,
                  "z_team_hfa_deviation", stan::model::index_uni(s))),
              sigma_team_hfa)), "assigning variable team_hfa",
          stan::model::index_uni(s));
      }
      current_statement__ = 34;
      stan::model::assign(team_strength,
        stan::math::multiply(stan::math::to_vector(z_team_strength_init),
          sigma_team_strength_init), "assigning variable team_strength",
        stan::model::index_uni(1));
      current_statement__ = 42;
      for (int w = 2; w <= N_weeks; ++w) {
        current_statement__ = 40;
        if (stan::math::logical_eq(
              stan::model::rvalue(is_first_week, "is_first_week",
                stan::model::index_uni(w)), 1)) {
          int s = std::numeric_limits<int>::min();
          current_statement__ = 37;
          s = stan::model::rvalue(week_to_season, "week_to_season",
                stan::model::index_uni(w));
          current_statement__ = 38;
          stan::model::assign(team_strength,
            stan::math::add(
              stan::math::multiply(phi_season_team_strength_innovation,
                stan::model::deep_copy(
                  stan::model::rvalue(team_strength, "team_strength",
                    stan::model::index_uni((w - 1))))),
              stan::math::multiply(
                stan::math::to_vector(
                  stan::model::rvalue(z_season_team_strength_innovation,
                    "z_season_team_strength_innovation",
                    stan::model::index_uni((s - 1)))),
                sigma_season_team_strength_innovation)),
            "assigning variable team_strength", stan::model::index_uni(w));
        } else {
          current_statement__ = 35;
          stan::model::assign(team_strength,
            stan::math::add(
              stan::math::multiply(phi_weekly_team_strength_innovation,
                stan::model::deep_copy(
                  stan::model::rvalue(team_strength, "team_strength",
                    stan::model::index_uni((w - 1))))),
              stan::math::multiply(
                stan::math::to_vector(
                  stan::model::rvalue(z_weekly_team_strength_innovation,
                    "z_weekly_team_strength_innovation",
                    stan::model::index_uni((w - 1)))),
                sigma_weekly_team_strength_innovation)),
            "assigning variable team_strength", stan::model::index_uni(w));
        }
      }
      if (emit_transformed_parameters__) {
        out__.write(league_hfa);
        current_statement__ = 17;
        for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N_seasons; ++sym2__) {
            out__.write(team_hfa[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        current_statement__ = 18;
        for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N_weeks; ++sym2__) {
            out__.write(team_strength[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      int last_w = std::numeric_limits<int>::min();
      current_statement__ = 19;
      last_w = stan::math::max(week_idx);
      int last_s = std::numeric_limits<int>::min();
      current_statement__ = 20;
      last_s = stan::model::rvalue(week_to_season, "week_to_season",
                 stan::model::index_uni(last_w));
      Eigen::Matrix<double,-1,1> filtered_team_strength_last =
        Eigen::Matrix<double,-1,1>::Constant(N_teams,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 21;
      stan::model::assign(filtered_team_strength_last,
        stan::model::rvalue(team_strength, "team_strength",
          stan::model::index_uni(last_w)),
        "assigning variable filtered_team_strength_last");
      Eigen::Matrix<double,-1,1> filtered_team_hfa_last =
        Eigen::Matrix<double,-1,1>::Constant(N_teams,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 22;
      stan::model::assign(filtered_team_hfa_last,
        stan::model::rvalue(team_hfa, "team_hfa",
          stan::model::index_uni(last_s)),
        "assigning variable filtered_team_hfa_last");
      double filtered_league_hfa_last =
        std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 23;
      filtered_league_hfa_last = stan::model::rvalue(league_hfa,
                                   "league_hfa",
                                   stan::model::index_uni(last_s));
      std::vector<Eigen::Matrix<double,-1,1>> predicted_team_strength =
        std::vector<Eigen::Matrix<double,-1,1>>(N_future_weeks,
          Eigen::Matrix<double,-1,1>::Constant(N_teams,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double,-1,1>> predicted_team_hfa =
        std::vector<Eigen::Matrix<double,-1,1>>(N_future_weeks,
          Eigen::Matrix<double,-1,1>::Constant(N_teams,
            std::numeric_limits<double>::quiet_NaN()));
      Eigen::Matrix<double,-1,1> predicted_league_hfa =
        Eigen::Matrix<double,-1,1>::Constant(N_future_weeks,
          std::numeric_limits<double>::quiet_NaN());
      {
        current_statement__ = 43;
        stan::math::validate_non_negative_index("ts_cur", "N_teams", N_teams);
        Eigen::Matrix<double,-1,1> ts_cur =
          Eigen::Matrix<double,-1,1>::Constant(N_teams,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 44;
        stan::model::assign(ts_cur, filtered_team_strength_last,
          "assigning variable ts_cur");
        double league_hfa_cur = std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 45;
        league_hfa_cur = filtered_league_hfa_last;
        current_statement__ = 46;
        stan::math::validate_non_negative_index("team_hfa_cur", "N_teams",
          N_teams);
        Eigen::Matrix<double,-1,1> team_hfa_cur =
          Eigen::Matrix<double,-1,1>::Constant(N_teams,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 47;
        stan::model::assign(team_hfa_cur, filtered_team_hfa_last,
          "assigning variable team_hfa_cur");
        int season_cur = std::numeric_limits<int>::min();
        current_statement__ = 48;
        season_cur = last_s;
        current_statement__ = 86;
        for (int fw = 1; fw <= N_future_weeks; ++fw) {
          int is_first = std::numeric_limits<int>::min();
          current_statement__ = 49;
          is_first = stan::model::rvalue(future_is_first_week,
                       "future_is_first_week", stan::model::index_uni(fw));
          int season_target = std::numeric_limits<int>::min();
          current_statement__ = 50;
          season_target = stan::model::rvalue(future_week_to_season,
                            "future_week_to_season",
                            stan::model::index_uni(fw));
          current_statement__ = 51;
          stan::math::validate_non_negative_index("z_raw", "N_teams - 1",
            (N_teams - 1));
          Eigen::Matrix<double,-1,1> z_raw =
            Eigen::Matrix<double,-1,1>::Constant((N_teams - 1),
              std::numeric_limits<double>::quiet_NaN());
          current_statement__ = 54;
          for (int t = 1; t <= (N_teams - 1); ++t) {
            current_statement__ = 53;
            stan::model::assign(z_raw,
              stan::math::normal_rng(0, 1, base_rng__),
              "assigning variable z_raw", stan::model::index_uni(t));
          }
          current_statement__ = 55;
          stan::math::validate_non_negative_index("z0", "N_teams", N_teams);
          Eigen::Matrix<double,-1,1> z0 =
            Eigen::Matrix<double,-1,1>::Constant(N_teams,
              std::numeric_limits<double>::quiet_NaN());
          current_statement__ = 56;
          stan::model::assign(z0, stan::math::sum_to_zero_constrain(z_raw),
            "assigning variable z0");
          current_statement__ = 81;
          if (stan::math::logical_eq(is_first, 1)) {
            current_statement__ = 64;
            stan::model::assign(ts_cur,
              stan::math::add(
                stan::math::multiply(phi_season_team_strength_innovation,
                  stan::model::deep_copy(ts_cur)),
                stan::math::multiply(z0,
                  sigma_season_team_strength_innovation)),
              "assigning variable ts_cur");
            current_statement__ = 78;
            if (stan::math::logical_lte(season_target, N_seasons)) {
              current_statement__ = 75;
              league_hfa_cur = stan::model::rvalue(league_hfa, "league_hfa",
                                 stan::model::index_uni(season_target));
              current_statement__ = 76;
              stan::model::assign(team_hfa_cur,
                stan::model::rvalue(team_hfa, "team_hfa",
                  stan::model::index_uni(season_target)),
                "assigning variable team_hfa_cur");
            } else {
              current_statement__ = 65;
              league_hfa_cur = ((phi_league_hfa * league_hfa_cur) +
                (stan::math::normal_rng(0, 1, base_rng__) *
                sigma_league_hfa_innovation));
              {
                current_statement__ = 66;
                stan::math::validate_non_negative_index("zh_raw",
                  "N_teams - 1", (N_teams - 1));
                Eigen::Matrix<double,-1,1> zh_raw =
                  Eigen::Matrix<double,-1,1>::Constant((N_teams - 1),
                    std::numeric_limits<double>::quiet_NaN());
                current_statement__ = 69;
                for (int t = 1; t <= (N_teams - 1); ++t) {
                  current_statement__ = 68;
                  stan::model::assign(zh_raw,
                    stan::math::normal_rng(0, 1, base_rng__),
                    "assigning variable zh_raw", stan::model::index_uni(t));
                }
                current_statement__ = 70;
                stan::math::validate_non_negative_index("zh0", "N_teams",
                  N_teams);
                Eigen::Matrix<double,-1,1> zh0 =
                  Eigen::Matrix<double,-1,1>::Constant(N_teams,
                    std::numeric_limits<double>::quiet_NaN());
                current_statement__ = 71;
                stan::model::assign(zh0,
                  stan::math::sum_to_zero_constrain(zh_raw),
                  "assigning variable zh0");
                current_statement__ = 72;
                stan::model::assign(team_hfa_cur,
                  stan::math::add(
                    stan::math::rep_vector(league_hfa_cur, N_teams),
                    stan::math::multiply(zh0, sigma_team_hfa)),
                  "assigning variable team_hfa_cur");
              }
            }
            current_statement__ = 79;
            season_cur = season_target;
          } else {
            current_statement__ = 57;
            stan::model::assign(ts_cur,
              stan::math::add(
                stan::math::multiply(phi_weekly_team_strength_innovation,
                  stan::model::deep_copy(ts_cur)),
                stan::math::multiply(z0,
                  sigma_weekly_team_strength_innovation)),
              "assigning variable ts_cur");
            current_statement__ = 62;
            if ((stan::math::primitive_value(
                   stan::math::logical_neq(season_target, season_cur))
                &&
                stan::math::primitive_value(
                  stan::math::logical_lte(season_target, N_seasons)))) {
              current_statement__ = 58;
              league_hfa_cur = stan::model::rvalue(league_hfa, "league_hfa",
                                 stan::model::index_uni(season_target));
              current_statement__ = 59;
              stan::model::assign(team_hfa_cur,
                stan::model::rvalue(team_hfa, "team_hfa",
                  stan::model::index_uni(season_target)),
                "assigning variable team_hfa_cur");
              current_statement__ = 60;
              season_cur = season_target;
            }
          }
          current_statement__ = 82;
          stan::model::assign(predicted_team_strength, ts_cur,
            "assigning variable predicted_team_strength",
            stan::model::index_uni(fw));
          current_statement__ = 83;
          stan::model::assign(predicted_team_hfa, team_hfa_cur,
            "assigning variable predicted_team_hfa",
            stan::model::index_uni(fw));
          current_statement__ = 84;
          stan::model::assign(predicted_league_hfa, league_hfa_cur,
            "assigning variable predicted_league_hfa",
            stan::model::index_uni(fw));
        }
      }
      Eigen::Matrix<double,-1,1> mu_pred =
        Eigen::Matrix<double,-1,1>::Constant(N_oos,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> y_pred =
        Eigen::Matrix<double,-1,1>::Constant(N_oos,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 117;
      for (int k = 1; k <= N_oos; ++k) {
        int s = std::numeric_limits<int>::min();
        current_statement__ = 88;
        s = stan::model::rvalue(oos_season_idx, "oos_season_idx",
              stan::model::index_uni(k));
        int w = std::numeric_limits<int>::min();
        current_statement__ = 89;
        w = stan::model::rvalue(oos_week_idx, "oos_week_idx",
              stan::model::index_uni(k));
        int i = std::numeric_limits<int>::min();
        current_statement__ = 90;
        i = stan::model::rvalue(oos_home_team, "oos_home_team",
              stan::model::index_uni(k));
        int j = std::numeric_limits<int>::min();
        current_statement__ = 91;
        j = stan::model::rvalue(oos_away_team, "oos_away_team",
              stan::model::index_uni(k));
        current_statement__ = 92;
        stan::math::validate_non_negative_index("ts_target", "N_teams",
          N_teams);
        Eigen::Matrix<double,-1,1> ts_target =
          Eigen::Matrix<double,-1,1>::Constant(N_teams,
            std::numeric_limits<double>::quiet_NaN());
        double hfa_home = std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 111;
        if (stan::math::logical_lte(w, N_weeks)) {
          current_statement__ = 108;
          stan::model::assign(ts_target,
            stan::model::rvalue(team_strength, "team_strength",
              stan::model::index_uni(w)), "assigning variable ts_target");
          current_statement__ = 109;
          hfa_home = (stan::math::logical_lte(s, N_seasons) ? stan::model::rvalue(
                                                                stan::model::rvalue(
                                                                  team_hfa,
                                                                  "team_hfa",
                                                                  stan::model::index_uni(
                                                                    s)),
                                                                "team_hfa[s]",
                                                                stan::model::index_uni(
                                                                  i)) : 
            stan::model::rvalue(
              stan::model::rvalue(team_hfa, "team_hfa",
                stan::model::index_uni(last_s)), "team_hfa[last_s]",
              stan::model::index_uni(i)));
        } else {
          current_statement__ = 107;
          if (stan::math::logical_gt(N_future_weeks, 0)) {
            int ahead = std::numeric_limits<int>::min();
            current_statement__ = 102;
            ahead = (w - N_weeks);
            int idx = std::numeric_limits<int>::min();
            current_statement__ = 103;
            idx = (stan::math::logical_lte(ahead, N_future_weeks) ? ahead : N_future_weeks);
            current_statement__ = 104;
            stan::model::assign(ts_target,
              stan::model::rvalue(predicted_team_strength,
                "predicted_team_strength", stan::model::index_uni(idx)),
              "assigning variable ts_target");
            current_statement__ = 105;
            hfa_home = stan::model::rvalue(
                         stan::model::rvalue(predicted_team_hfa,
                           "predicted_team_hfa", stan::model::index_uni(idx)),
                         "predicted_team_hfa[idx]", stan::model::index_uni(i));
          } else {
            current_statement__ = 99;
            if (stan::math::logical_eq(
                  stan::model::rvalue(is_last_week, "is_last_week",
                    stan::model::index_uni(last_w)), 1)) {
              current_statement__ = 97;
              stan::model::assign(ts_target,
                stan::math::multiply(phi_season_team_strength_innovation,
                  filtered_team_strength_last),
                "assigning variable ts_target");
            } else {
              current_statement__ = 95;
              stan::model::assign(ts_target,
                stan::math::multiply(phi_weekly_team_strength_innovation,
                  filtered_team_strength_last),
                "assigning variable ts_target");
            }
            current_statement__ = 100;
            hfa_home = stan::model::rvalue(filtered_team_hfa_last,
                         "filtered_team_hfa_last", stan::model::index_uni(i));
          }
        }
        {
          double mu = std::numeric_limits<double>::quiet_NaN();
          current_statement__ = 112;
          mu = ((stan::model::rvalue(ts_target, "ts_target",
                   stan::model::index_uni(i))
            -
            stan::model::rvalue(ts_target, "ts_target",
              stan::model::index_uni(j)))
            +
            (stan::model::rvalue(oos_hfa, "oos_hfa",
               stan::model::index_uni(k))
            * hfa_home));
          current_statement__ = 113;
          stan::model::assign(mu_pred, mu, "assigning variable mu_pred",
            stan::model::index_uni(k));
          current_statement__ = 114;
          stan::model::assign(y_pred,
            stan::math::normal_rng(mu, sigma_obs, base_rng__),
            "assigning variable y_pred", stan::model::index_uni(k));
        }
      }
      out__.write(last_w);
      out__.write(last_s);
      out__.write(filtered_team_strength_last);
      out__.write(filtered_team_hfa_last);
      out__.write(filtered_league_hfa_last);
      current_statement__ = 24;
      for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_future_weeks; ++sym2__) {
          out__.write(predicted_team_strength[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      current_statement__ = 25;
      for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_future_weeks; ++sym2__) {
          out__.write(predicted_team_hfa[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(predicted_league_hfa);
      out__.write(mu_pred);
      out__.write(y_pred);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      local_scalar_t__ league_hfa_init = DUMMY_VAR__;
      current_statement__ = 1;
      league_hfa_init = in__.read<local_scalar_t__>();
      out__.write(league_hfa_init);
      Eigen::Matrix<local_scalar_t__,-1,1> z_league_hfa_innovation =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(z_league_hfa_innovation_1dim__,
          DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(z_league_hfa_innovation,
        in__.read<
          Eigen::Matrix<local_scalar_t__,-1,1>>(z_league_hfa_innovation_1dim__),
        "assigning variable z_league_hfa_innovation");
      out__.write(z_league_hfa_innovation);
      local_scalar_t__ sigma_league_hfa_innovation = DUMMY_VAR__;
      current_statement__ = 3;
      sigma_league_hfa_innovation = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_league_hfa_innovation);
      local_scalar_t__ phi_league_hfa = DUMMY_VAR__;
      current_statement__ = 4;
      phi_league_hfa = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, phi_league_hfa);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        z_team_hfa_deviation =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N_seasons,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_teams,
            DUMMY_VAR__));
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_seasons; ++sym2__) {
          current_statement__ = 5;
          stan::model::assign(z_team_hfa_deviation,
            in__.read<local_scalar_t__>(),
            "assigning variable z_team_hfa_deviation",
            stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
        }
      }
      out__.write_free_sum_to_zero(z_team_hfa_deviation);
      local_scalar_t__ sigma_team_hfa = DUMMY_VAR__;
      current_statement__ = 6;
      sigma_team_hfa = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_team_hfa);
      Eigen::Matrix<local_scalar_t__,-1,1> z_team_strength_init =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_teams, DUMMY_VAR__);
      current_statement__ = 7;
      stan::model::assign(z_team_strength_init,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N_teams),
        "assigning variable z_team_strength_init");
      out__.write_free_sum_to_zero(z_team_strength_init);
      local_scalar_t__ sigma_team_strength_init = DUMMY_VAR__;
      current_statement__ = 8;
      sigma_team_strength_init = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_team_strength_init);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        z_weekly_team_strength_innovation =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(z_weekly_team_strength_innovation_1dim__,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_teams,
            DUMMY_VAR__));
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
        for (int sym2__ = 1; sym2__ <=
             z_weekly_team_strength_innovation_1dim__; ++sym2__) {
          current_statement__ = 9;
          stan::model::assign(z_weekly_team_strength_innovation,
            in__.read<local_scalar_t__>(),
            "assigning variable z_weekly_team_strength_innovation",
            stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
        }
      }
      out__.write_free_sum_to_zero(z_weekly_team_strength_innovation);
      local_scalar_t__ sigma_weekly_team_strength_innovation = DUMMY_VAR__;
      current_statement__ = 10;
      sigma_weekly_team_strength_innovation = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_weekly_team_strength_innovation);
      local_scalar_t__ phi_weekly_team_strength_innovation = DUMMY_VAR__;
      current_statement__ = 11;
      phi_weekly_team_strength_innovation = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, phi_weekly_team_strength_innovation);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        z_season_team_strength_innovation =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(z_season_team_strength_innovation_1dim__,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_teams,
            DUMMY_VAR__));
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
        for (int sym2__ = 1; sym2__ <=
             z_season_team_strength_innovation_1dim__; ++sym2__) {
          current_statement__ = 12;
          stan::model::assign(z_season_team_strength_innovation,
            in__.read<local_scalar_t__>(),
            "assigning variable z_season_team_strength_innovation",
            stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
        }
      }
      out__.write_free_sum_to_zero(z_season_team_strength_innovation);
      local_scalar_t__ sigma_season_team_strength_innovation = DUMMY_VAR__;
      current_statement__ = 13;
      sigma_season_team_strength_innovation = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_season_team_strength_innovation);
      local_scalar_t__ phi_season_team_strength_innovation = DUMMY_VAR__;
      current_statement__ = 14;
      phi_season_team_strength_innovation = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, phi_season_team_strength_innovation);
      local_scalar_t__ sigma_obs = DUMMY_VAR__;
      current_statement__ = 15;
      sigma_obs = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_obs);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "league_hfa_init",
        "double", std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization",
        "z_league_hfa_innovation", "double",
        std::vector<size_t>{static_cast<size_t>(
                              z_league_hfa_innovation_1dim__)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization",
        "sigma_league_hfa_innovation", "double", std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "phi_league_hfa",
        "double", std::vector<size_t>{});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization",
        "z_team_hfa_deviation", "double",
        std::vector<size_t>{static_cast<size_t>(N_seasons),
          static_cast<size_t>(N_teams)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "sigma_team_hfa",
        "double", std::vector<size_t>{});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization",
        "z_team_strength_init", "double",
        std::vector<size_t>{static_cast<size_t>(N_teams)});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization",
        "sigma_team_strength_init", "double", std::vector<size_t>{});
      current_statement__ = 9;
      context__.validate_dims("parameter initialization",
        "z_weekly_team_strength_innovation", "double",
        std::vector<size_t>{static_cast<size_t>(
                              z_weekly_team_strength_innovation_1dim__),
          static_cast<size_t>(N_teams)});
      current_statement__ = 10;
      context__.validate_dims("parameter initialization",
        "sigma_weekly_team_strength_innovation", "double",
        std::vector<size_t>{});
      current_statement__ = 11;
      context__.validate_dims("parameter initialization",
        "phi_weekly_team_strength_innovation", "double",
        std::vector<size_t>{});
      current_statement__ = 12;
      context__.validate_dims("parameter initialization",
        "z_season_team_strength_innovation", "double",
        std::vector<size_t>{static_cast<size_t>(
                              z_season_team_strength_innovation_1dim__),
          static_cast<size_t>(N_teams)});
      current_statement__ = 13;
      context__.validate_dims("parameter initialization",
        "sigma_season_team_strength_innovation", "double",
        std::vector<size_t>{});
      current_statement__ = 14;
      context__.validate_dims("parameter initialization",
        "phi_season_team_strength_innovation", "double",
        std::vector<size_t>{});
      current_statement__ = 15;
      context__.validate_dims("parameter initialization", "sigma_obs",
        "double", std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ league_hfa_init = DUMMY_VAR__;
      current_statement__ = 1;
      league_hfa_init = context__.vals_r("league_hfa_init")[(1 - 1)];
      out__.write(league_hfa_init);
      Eigen::Matrix<local_scalar_t__,-1,1> z_league_hfa_innovation =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(z_league_hfa_innovation_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> z_league_hfa_innovation_flat__;
        current_statement__ = 2;
        z_league_hfa_innovation_flat__ = context__.vals_r("z_league_hfa_innovation");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <=
             z_league_hfa_innovation_1dim__; ++sym1__) {
          stan::model::assign(z_league_hfa_innovation,
            z_league_hfa_innovation_flat__[(pos__ - 1)],
            "assigning variable z_league_hfa_innovation",
            stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(z_league_hfa_innovation);
      local_scalar_t__ sigma_league_hfa_innovation = DUMMY_VAR__;
      current_statement__ = 3;
      sigma_league_hfa_innovation = context__.vals_r("sigma_league_hfa_innovation")[(1
        - 1)];
      out__.write_free_lb(0, sigma_league_hfa_innovation);
      local_scalar_t__ phi_league_hfa = DUMMY_VAR__;
      current_statement__ = 4;
      phi_league_hfa = context__.vals_r("phi_league_hfa")[(1 - 1)];
      out__.write_free_lub(0, 1, phi_league_hfa);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        z_team_hfa_deviation =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N_seasons,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_teams,
            DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> z_team_hfa_deviation_flat__;
        current_statement__ = 5;
        z_team_hfa_deviation_flat__ = context__.vals_r("z_team_hfa_deviation");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N_seasons; ++sym2__) {
            stan::model::assign(z_team_hfa_deviation,
              z_team_hfa_deviation_flat__[(pos__ - 1)],
              "assigning variable z_team_hfa_deviation",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_sum_to_zero(z_team_hfa_deviation);
      local_scalar_t__ sigma_team_hfa = DUMMY_VAR__;
      current_statement__ = 6;
      sigma_team_hfa = context__.vals_r("sigma_team_hfa")[(1 - 1)];
      out__.write_free_lb(0, sigma_team_hfa);
      Eigen::Matrix<local_scalar_t__,-1,1> z_team_strength_init =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_teams, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> z_team_strength_init_flat__;
        current_statement__ = 7;
        z_team_strength_init_flat__ = context__.vals_r("z_team_strength_init");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
          stan::model::assign(z_team_strength_init,
            z_team_strength_init_flat__[(pos__ - 1)],
            "assigning variable z_team_strength_init",
            stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_sum_to_zero(z_team_strength_init);
      local_scalar_t__ sigma_team_strength_init = DUMMY_VAR__;
      current_statement__ = 8;
      sigma_team_strength_init = context__.vals_r("sigma_team_strength_init")[(1
        - 1)];
      out__.write_free_lb(0, sigma_team_strength_init);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        z_weekly_team_strength_innovation =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(z_weekly_team_strength_innovation_1dim__,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_teams,
            DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> z_weekly_team_strength_innovation_flat__;
        current_statement__ = 9;
        z_weekly_team_strength_innovation_flat__ = context__.vals_r("z_weekly_team_strength_innovation");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
          for (int sym2__ = 1; sym2__ <=
               z_weekly_team_strength_innovation_1dim__; ++sym2__) {
            stan::model::assign(z_weekly_team_strength_innovation,
              z_weekly_team_strength_innovation_flat__[(pos__ - 1)],
              "assigning variable z_weekly_team_strength_innovation",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_sum_to_zero(z_weekly_team_strength_innovation);
      local_scalar_t__ sigma_weekly_team_strength_innovation = DUMMY_VAR__;
      current_statement__ = 10;
      sigma_weekly_team_strength_innovation = context__.vals_r("sigma_weekly_team_strength_innovation")[(1
        - 1)];
      out__.write_free_lb(0, sigma_weekly_team_strength_innovation);
      local_scalar_t__ phi_weekly_team_strength_innovation = DUMMY_VAR__;
      current_statement__ = 11;
      phi_weekly_team_strength_innovation = context__.vals_r("phi_weekly_team_strength_innovation")[(1
        - 1)];
      out__.write_free_lub(0, 1, phi_weekly_team_strength_innovation);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        z_season_team_strength_innovation =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(z_season_team_strength_innovation_1dim__,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_teams,
            DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> z_season_team_strength_innovation_flat__;
        current_statement__ = 12;
        z_season_team_strength_innovation_flat__ = context__.vals_r("z_season_team_strength_innovation");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
          for (int sym2__ = 1; sym2__ <=
               z_season_team_strength_innovation_1dim__; ++sym2__) {
            stan::model::assign(z_season_team_strength_innovation,
              z_season_team_strength_innovation_flat__[(pos__ - 1)],
              "assigning variable z_season_team_strength_innovation",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_sum_to_zero(z_season_team_strength_innovation);
      local_scalar_t__ sigma_season_team_strength_innovation = DUMMY_VAR__;
      current_statement__ = 13;
      sigma_season_team_strength_innovation = context__.vals_r("sigma_season_team_strength_innovation")[(1
        - 1)];
      out__.write_free_lb(0, sigma_season_team_strength_innovation);
      local_scalar_t__ phi_season_team_strength_innovation = DUMMY_VAR__;
      current_statement__ = 14;
      phi_season_team_strength_innovation = context__.vals_r("phi_season_team_strength_innovation")[(1
        - 1)];
      out__.write_free_lub(0, 1, phi_season_team_strength_innovation);
      local_scalar_t__ sigma_obs = DUMMY_VAR__;
      current_statement__ = 15;
      sigma_obs = context__.vals_r("sigma_obs")[(1 - 1)];
      out__.write_free_lb(0, sigma_obs);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"league_hfa_init",
                "z_league_hfa_innovation", "sigma_league_hfa_innovation",
                "phi_league_hfa", "z_team_hfa_deviation", "sigma_team_hfa",
                "z_team_strength_init", "sigma_team_strength_init",
                "z_weekly_team_strength_innovation",
                "sigma_weekly_team_strength_innovation",
                "phi_weekly_team_strength_innovation",
                "z_season_team_strength_innovation",
                "sigma_season_team_strength_innovation",
                "phi_season_team_strength_innovation", "sigma_obs"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"league_hfa", "team_hfa", "team_strength"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string>
        temp{"last_w", "last_s", "filtered_team_strength_last",
             "filtered_team_hfa_last", "filtered_league_hfa_last",
             "predicted_team_strength", "predicted_team_hfa",
             "predicted_league_hfa", "mu_pred", "y_pred"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(
                                      z_league_hfa_innovation_1dim__)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(N_seasons),
                  static_cast<size_t>(N_teams)}, std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(N_teams)},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(
                                      z_weekly_team_strength_innovation_1dim__),
                  static_cast<size_t>(N_teams)}, std::vector<size_t>{},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(
                                      z_season_team_strength_innovation_1dim__),
                  static_cast<size_t>(N_teams)}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N_seasons)},
             std::vector<size_t>{static_cast<size_t>(N_seasons),
               static_cast<size_t>(N_teams)},
             std::vector<size_t>{static_cast<size_t>(N_weeks),
               static_cast<size_t>(N_teams)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(N_teams)},
             std::vector<size_t>{static_cast<size_t>(N_teams)},
             std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(N_future_weeks),
               static_cast<size_t>(N_teams)},
             std::vector<size_t>{static_cast<size_t>(N_future_weeks),
               static_cast<size_t>(N_teams)},
             std::vector<size_t>{static_cast<size_t>(N_future_weeks)},
             std::vector<size_t>{static_cast<size_t>(N_oos)},
             std::vector<size_t>{static_cast<size_t>(N_oos)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "league_hfa_init");
    for (int sym1__ = 1; sym1__ <= z_league_hfa_innovation_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "z_league_hfa_innovation" +
        '.' + std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma_league_hfa_innovation");
    param_names__.emplace_back(std::string() + "phi_league_hfa");
    for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= N_seasons; ++sym2__) {
        param_names__.emplace_back(std::string() + "z_team_hfa_deviation" +
          '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    param_names__.emplace_back(std::string() + "sigma_team_hfa");
    for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
      param_names__.emplace_back(std::string() + "z_team_strength_init" + '.'
        + std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma_team_strength_init");
    for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
      for (int sym2__ = 1; sym2__ <=
           z_weekly_team_strength_innovation_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() +
          "z_weekly_team_strength_innovation" + '.' + std::to_string(sym2__)
          + '.' + std::to_string(sym1__));
      }
    }
    param_names__.emplace_back(std::string() +
      "sigma_weekly_team_strength_innovation");
    param_names__.emplace_back(std::string() +
      "phi_weekly_team_strength_innovation");
    for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
      for (int sym2__ = 1; sym2__ <=
           z_season_team_strength_innovation_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() +
          "z_season_team_strength_innovation" + '.' + std::to_string(sym2__)
          + '.' + std::to_string(sym1__));
      }
    }
    param_names__.emplace_back(std::string() +
      "sigma_season_team_strength_innovation");
    param_names__.emplace_back(std::string() +
      "phi_season_team_strength_innovation");
    param_names__.emplace_back(std::string() + "sigma_obs");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N_seasons; ++sym1__) {
        param_names__.emplace_back(std::string() + "league_hfa" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_seasons; ++sym2__) {
          param_names__.emplace_back(std::string() + "team_hfa" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_weeks; ++sym2__) {
          param_names__.emplace_back(std::string() + "team_strength" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "last_w");
      param_names__.emplace_back(std::string() + "last_s");
      for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
        param_names__.emplace_back(std::string() +
          "filtered_team_strength_last" + '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
        param_names__.emplace_back(std::string() + "filtered_team_hfa_last" +
          '.' + std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "filtered_league_hfa_last");
      for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_future_weeks; ++sym2__) {
          param_names__.emplace_back(std::string() +
            "predicted_team_strength" + '.' + std::to_string(sym2__) + '.' +
            std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_future_weeks; ++sym2__) {
          param_names__.emplace_back(std::string() + "predicted_team_hfa" +
            '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_future_weeks; ++sym1__) {
        param_names__.emplace_back(std::string() + "predicted_league_hfa" +
          '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_oos; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu_pred" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_oos; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_pred" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "league_hfa_init");
    for (int sym1__ = 1; sym1__ <= z_league_hfa_innovation_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "z_league_hfa_innovation" +
        '.' + std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma_league_hfa_innovation");
    param_names__.emplace_back(std::string() + "phi_league_hfa");
    for (int sym1__ = 1; sym1__ <= (N_teams - 1); ++sym1__) {
      for (int sym2__ = 1; sym2__ <= N_seasons; ++sym2__) {
        param_names__.emplace_back(std::string() + "z_team_hfa_deviation" +
          '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    param_names__.emplace_back(std::string() + "sigma_team_hfa");
    for (int sym1__ = 1; sym1__ <= (N_teams - 1); ++sym1__) {
      param_names__.emplace_back(std::string() + "z_team_strength_init" + '.'
        + std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma_team_strength_init");
    for (int sym1__ = 1; sym1__ <= (N_teams - 1); ++sym1__) {
      for (int sym2__ = 1; sym2__ <=
           z_weekly_team_strength_innovation_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() +
          "z_weekly_team_strength_innovation" + '.' + std::to_string(sym2__)
          + '.' + std::to_string(sym1__));
      }
    }
    param_names__.emplace_back(std::string() +
      "sigma_weekly_team_strength_innovation");
    param_names__.emplace_back(std::string() +
      "phi_weekly_team_strength_innovation");
    for (int sym1__ = 1; sym1__ <= (N_teams - 1); ++sym1__) {
      for (int sym2__ = 1; sym2__ <=
           z_season_team_strength_innovation_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() +
          "z_season_team_strength_innovation" + '.' + std::to_string(sym2__)
          + '.' + std::to_string(sym1__));
      }
    }
    param_names__.emplace_back(std::string() +
      "sigma_season_team_strength_innovation");
    param_names__.emplace_back(std::string() +
      "phi_season_team_strength_innovation");
    param_names__.emplace_back(std::string() + "sigma_obs");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N_seasons; ++sym1__) {
        param_names__.emplace_back(std::string() + "league_hfa" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_seasons; ++sym2__) {
          param_names__.emplace_back(std::string() + "team_hfa" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_weeks; ++sym2__) {
          param_names__.emplace_back(std::string() + "team_strength" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "last_w");
      param_names__.emplace_back(std::string() + "last_s");
      for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
        param_names__.emplace_back(std::string() +
          "filtered_team_strength_last" + '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
        param_names__.emplace_back(std::string() + "filtered_team_hfa_last" +
          '.' + std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "filtered_league_hfa_last");
      for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_future_weeks; ++sym2__) {
          param_names__.emplace_back(std::string() +
            "predicted_team_strength" + '.' + std::to_string(sym2__) + '.' +
            std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_future_weeks; ++sym2__) {
          param_names__.emplace_back(std::string() + "predicted_team_hfa" +
            '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_future_weeks; ++sym1__) {
        param_names__.emplace_back(std::string() + "predicted_league_hfa" +
          '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_oos; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu_pred" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_oos; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_pred" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"league_hfa_init\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_league_hfa_innovation\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(z_league_hfa_innovation_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"sigma_league_hfa_innovation\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi_league_hfa\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_team_hfa_deviation\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_seasons) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_teams) + "}},\"block\":\"parameters\"},{\"name\":\"sigma_team_hfa\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_team_strength_init\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_teams) + "},\"block\":\"parameters\"},{\"name\":\"sigma_team_strength_init\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_weekly_team_strength_innovation\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(z_weekly_team_strength_innovation_1dim__) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_teams) + "}},\"block\":\"parameters\"},{\"name\":\"sigma_weekly_team_strength_innovation\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi_weekly_team_strength_innovation\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_season_team_strength_innovation\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(z_season_team_strength_innovation_1dim__) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_teams) + "}},\"block\":\"parameters\"},{\"name\":\"sigma_season_team_strength_innovation\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi_season_team_strength_innovation\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_obs\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"league_hfa\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_seasons) + "},\"block\":\"transformed_parameters\"},{\"name\":\"team_hfa\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_seasons) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_teams) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"team_strength\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_weeks) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_teams) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"last_w\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"last_s\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"filtered_team_strength_last\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_teams) + "},\"block\":\"generated_quantities\"},{\"name\":\"filtered_team_hfa_last\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_teams) + "},\"block\":\"generated_quantities\"},{\"name\":\"filtered_league_hfa_last\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"predicted_team_strength\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_future_weeks) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_teams) + "}},\"block\":\"generated_quantities\"},{\"name\":\"predicted_team_hfa\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_future_weeks) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_teams) + "}},\"block\":\"generated_quantities\"},{\"name\":\"predicted_league_hfa\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_future_weeks) + "},\"block\":\"generated_quantities\"},{\"name\":\"mu_pred\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_oos) + "},\"block\":\"generated_quantities\"},{\"name\":\"y_pred\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_oos) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"league_hfa_init\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_league_hfa_innovation\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(z_league_hfa_innovation_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"sigma_league_hfa_innovation\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi_league_hfa\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_team_hfa_deviation\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_seasons) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string((N_teams -1)) + "}},\"block\":\"parameters\"},{\"name\":\"sigma_team_hfa\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_team_strength_init\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string((N_teams -1)) + "},\"block\":\"parameters\"},{\"name\":\"sigma_team_strength_init\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_weekly_team_strength_innovation\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(z_weekly_team_strength_innovation_1dim__) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string((N_teams -1)) + "}},\"block\":\"parameters\"},{\"name\":\"sigma_weekly_team_strength_innovation\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi_weekly_team_strength_innovation\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_season_team_strength_innovation\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(z_season_team_strength_innovation_1dim__) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string((N_teams -1)) + "}},\"block\":\"parameters\"},{\"name\":\"sigma_season_team_strength_innovation\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi_season_team_strength_innovation\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_obs\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"league_hfa\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_seasons) + "},\"block\":\"transformed_parameters\"},{\"name\":\"team_hfa\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_seasons) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_teams) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"team_strength\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_weeks) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_teams) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"last_w\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"last_s\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"filtered_team_strength_last\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_teams) + "},\"block\":\"generated_quantities\"},{\"name\":\"filtered_team_hfa_last\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_teams) + "},\"block\":\"generated_quantities\"},{\"name\":\"filtered_league_hfa_last\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"predicted_team_strength\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_future_weeks) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_teams) + "}},\"block\":\"generated_quantities\"},{\"name\":\"predicted_team_hfa\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_future_weeks) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_teams) + "}},\"block\":\"generated_quantities\"},{\"name\":\"predicted_league_hfa\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_future_weeks) + "},\"block\":\"generated_quantities\"},{\"name\":\"mu_pred\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_oos) + "},\"block\":\"generated_quantities\"},{\"name\":\"y_pred\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_oos) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((((((((1 +
      z_league_hfa_innovation_1dim__) + 1) + 1) + (N_seasons * N_teams)) + 1)
      + N_teams) + 1) + (z_weekly_team_strength_innovation_1dim__ * N_teams))
      + 1) + 1) + (z_season_team_strength_innovation_1dim__ * N_teams)) + 1)
      + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (((N_seasons
      + (N_seasons * N_teams)) + (N_weeks * N_teams)));
    const size_t num_gen_quantities = emit_generated_quantities * ((((((((((1
      + 1) + N_teams) + N_teams) + 1) + (N_future_weeks * N_teams)) +
      (N_future_weeks * N_teams)) + N_future_weeks) + N_oos) + N_oos));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((((((((1 +
      z_league_hfa_innovation_1dim__) + 1) + 1) + (N_seasons * N_teams)) + 1)
      + N_teams) + 1) + (z_weekly_team_strength_innovation_1dim__ * N_teams))
      + 1) + 1) + (z_season_team_strength_innovation_1dim__ * N_teams)) + 1)
      + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (((N_seasons
      + (N_seasons * N_teams)) + (N_weeks * N_teams)));
    const size_t num_gen_quantities = emit_generated_quantities * ((((((((((1
      + 1) + N_teams) + N_teams) + 1) + (N_future_weeks * N_teams)) +
      (N_future_weeks * N_teams)) + N_future_weeks) + N_oos) + N_oos));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_latent_strength_ssm_gq_namespace::model_latent_strength_ssm_gq;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_latent_strength_ssm_gq_namespace::profiles__;
}
#endif
#endif
