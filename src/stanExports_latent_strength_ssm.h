// Generated by rstantools.  Do not edit by hand.

/*
    nflytics is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    nflytics is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with nflytics.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.37.0-61-g7c641b3
#include <stan/model/model_header.hpp>
namespace model_latent_strength_ssm_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 172> locations_array__ =
  {" (found before start of program)",
  " (in 'latent_strength_ssm', line 74, column 2 to column 23)",
  " (in 'latent_strength_ssm', line 76, column 2 to column 48)",
  " (in 'latent_strength_ssm', line 77, column 2 to column 44)",
  " (in 'latent_strength_ssm', line 78, column 2 to column 40)",
  " (in 'latent_strength_ssm', line 80, column 2 to column 68)",
  " (in 'latent_strength_ssm', line 81, column 2 to column 31)",
  " (in 'latent_strength_ssm', line 84, column 2 to column 51)",
  " (in 'latent_strength_ssm', line 85, column 2 to column 41)",
  " (in 'latent_strength_ssm', line 88, column 2 to column 83)",
  " (in 'latent_strength_ssm', line 89, column 2 to column 54)",
  " (in 'latent_strength_ssm', line 90, column 2 to column 61)",
  " (in 'latent_strength_ssm', line 92, column 2 to column 85)",
  " (in 'latent_strength_ssm', line 93, column 2 to column 54)",
  " (in 'latent_strength_ssm', line 94, column 2 to column 61)",
  " (in 'latent_strength_ssm', line 97, column 2 to column 26)",
  " (in 'latent_strength_ssm', line 101, column 2 to column 31)",
  " (in 'latent_strength_ssm', line 108, column 2 to column 44)",
  " (in 'latent_strength_ssm', line 114, column 2 to column 47)",
  " (in 'latent_strength_ssm', line 130, column 2 to line 133, column 43)",
  " (in 'latent_strength_ssm', line 165, column 2 to column 29)",
  " (in 'latent_strength_ssm', line 166, column 2 to column 38)",
  " (in 'latent_strength_ssm', line 169, column 2 to column 65)",
  " (in 'latent_strength_ssm', line 170, column 2 to column 55)",
  " (in 'latent_strength_ssm', line 171, column 2 to column 48)",
  " (in 'latent_strength_ssm', line 175, column 2 to column 42)",
  " (in 'latent_strength_ssm', line 176, column 2 to column 37)",
  " (in 'latent_strength_ssm', line 177, column 2 to column 28)",
  " (in 'latent_strength_ssm', line 219, column 2 to column 26)",
  " (in 'latent_strength_ssm', line 102, column 2 to column 34)",
  " (in 'latent_strength_ssm', line 104, column 4 to line 105, column 83)",
  " (in 'latent_strength_ssm', line 103, column 27 to line 106, column 3)",
  " (in 'latent_strength_ssm', line 103, column 2 to line 106, column 3)",
  " (in 'latent_strength_ssm', line 110, column 4 to column 75)",
  " (in 'latent_strength_ssm', line 109, column 26 to line 111, column 3)",
  " (in 'latent_strength_ssm', line 109, column 2 to line 111, column 3)",
  " (in 'latent_strength_ssm', line 116, column 2 to column 69)",
  " (in 'latent_strength_ssm', line 125, column 6 to line 126, column 108)",
  " (in 'latent_strength_ssm', line 124, column 11 to line 127, column 5)",
  " (in 'latent_strength_ssm', line 120, column 6 to column 32)",
  " (in 'latent_strength_ssm', line 122, column 6 to line 123, column 108)",
  " (in 'latent_strength_ssm', line 119, column 31 to line 124, column 5)",
  " (in 'latent_strength_ssm', line 119, column 4 to line 127, column 5)",
  " (in 'latent_strength_ssm', line 118, column 25 to line 128, column 3)",
  " (in 'latent_strength_ssm', line 118, column 2 to line 128, column 3)",
  " (in 'latent_strength_ssm', line 180, column 4 to column 45)",
  " (in 'latent_strength_ssm', line 184, column 11 to column 22)",
  " (in 'latent_strength_ssm', line 184, column 4 to column 30)",
  " (in 'latent_strength_ssm', line 186, column 6 to column 34)",
  " (in 'latent_strength_ssm', line 185, column 33 to line 187, column 5)",
  " (in 'latent_strength_ssm', line 185, column 4 to line 187, column 5)",
  " (in 'latent_strength_ssm', line 188, column 11 to column 18)",
  " (in 'latent_strength_ssm', line 188, column 4 to column 54)",
  " (in 'latent_strength_ssm', line 194, column 6 to line 195, column 82)",
  " (in 'latent_strength_ssm', line 193, column 11 to line 196, column 5)",
  " (in 'latent_strength_ssm', line 191, column 6 to line 192, column 82)",
  " (in 'latent_strength_ssm', line 190, column 28 to line 193, column 5)",
  " (in 'latent_strength_ssm', line 190, column 4 to line 196, column 5)",
  " (in 'latent_strength_ssm', line 213, column 6 to column 48)",
  " (in 'latent_strength_ssm', line 214, column 6 to column 44)",
  " (in 'latent_strength_ssm', line 211, column 11 to line 215, column 5)",
  " (in 'latent_strength_ssm', line 201, column 6 to line 202, column 74)",
  " (in 'latent_strength_ssm', line 205, column 13 to column 24)",
  " (in 'latent_strength_ssm', line 205, column 6 to column 34)",
  " (in 'latent_strength_ssm', line 207, column 8 to column 38)",
  " (in 'latent_strength_ssm', line 206, column 35 to line 208, column 7)",
  " (in 'latent_strength_ssm', line 206, column 6 to line 208, column 7)",
  " (in 'latent_strength_ssm', line 209, column 13 to column 20)",
  " (in 'latent_strength_ssm', line 209, column 6 to column 63)",
  " (in 'latent_strength_ssm', line 210, column 6 to column 75)",
  " (in 'latent_strength_ssm', line 199, column 28 to line 211, column 5)",
  " (in 'latent_strength_ssm', line 199, column 4 to line 215, column 5)",
  " (in 'latent_strength_ssm', line 179, column 2 to line 216, column 3)",
  " (in 'latent_strength_ssm', line 221, column 4 to column 59)",
  " (in 'latent_strength_ssm', line 220, column 25 to line 222, column 3)",
  " (in 'latent_strength_ssm', line 220, column 2 to line 222, column 3)",
  " (in 'latent_strength_ssm', line 138, column 2 to column 33)",
  " (in 'latent_strength_ssm', line 139, column 2 to column 41)",
  " (in 'latent_strength_ssm', line 140, column 2 to column 51)",
  " (in 'latent_strength_ssm', line 141, column 2 to column 30)",
  " (in 'latent_strength_ssm', line 144, column 27 to column 66)",
  " (in 'latent_strength_ssm', line 144, column 2 to column 66)",
  " (in 'latent_strength_ssm', line 145, column 2 to column 38)",
  " (in 'latent_strength_ssm', line 147, column 2 to column 38)",
  " (in 'latent_strength_ssm', line 148, column 2 to column 48)",
  " (in 'latent_strength_ssm', line 150, column 31 to column 83)",
  " (in 'latent_strength_ssm', line 150, column 2 to column 83)",
  " (in 'latent_strength_ssm', line 151, column 2 to column 61)",
  " (in 'latent_strength_ssm', line 152, column 2 to column 51)",
  " (in 'latent_strength_ssm', line 154, column 33 to column 85)",
  " (in 'latent_strength_ssm', line 154, column 2 to column 85)",
  " (in 'latent_strength_ssm', line 155, column 2 to column 61)",
  " (in 'latent_strength_ssm', line 156, column 2 to column 51)",
  " (in 'latent_strength_ssm', line 158, column 2 to column 34)",
  " (in 'latent_strength_ssm', line 161, column 2 to column 33)",
  " (in 'latent_strength_ssm', line 27, column 2 to column 23)",
  " (in 'latent_strength_ssm', line 28, column 2 to column 23)",
  " (in 'latent_strength_ssm', line 29, column 2 to column 25)",
  " (in 'latent_strength_ssm', line 30, column 2 to column 23)",
  " (in 'latent_strength_ssm', line 33, column 8 to column 15)",
  " (in 'latent_strength_ssm', line 33, column 2 to column 55)",
  " (in 'latent_strength_ssm', line 34, column 8 to column 15)",
  " (in 'latent_strength_ssm', line 34, column 2 to column 55)",
  " (in 'latent_strength_ssm', line 35, column 8 to column 15)",
  " (in 'latent_strength_ssm', line 35, column 2 to column 58)",
  " (in 'latent_strength_ssm', line 36, column 8 to column 15)",
  " (in 'latent_strength_ssm', line 36, column 2 to column 54)",
  " (in 'latent_strength_ssm', line 39, column 8 to column 15)",
  " (in 'latent_strength_ssm', line 39, column 2 to column 53)",
  " (in 'latent_strength_ssm', line 40, column 8 to column 15)",
  " (in 'latent_strength_ssm', line 40, column 2 to column 53)",
  " (in 'latent_strength_ssm', line 41, column 8 to column 15)",
  " (in 'latent_strength_ssm', line 41, column 2 to column 43)",
  " (in 'latent_strength_ssm', line 44, column 8 to column 15)",
  " (in 'latent_strength_ssm', line 44, column 2 to column 41)",
  " (in 'latent_strength_ssm', line 45, column 8 to column 15)",
  " (in 'latent_strength_ssm', line 45, column 2 to column 41)",
  " (in 'latent_strength_ssm', line 46, column 8 to column 15)",
  " (in 'latent_strength_ssm', line 46, column 2 to column 36)",
  " (in 'latent_strength_ssm', line 47, column 8 to column 15)",
  " (in 'latent_strength_ssm', line 47, column 2 to column 28)",
  " (in 'latent_strength_ssm', line 51, column 8 to column 15)",
  " (in 'latent_strength_ssm', line 51, column 2 to column 60)",
  " (in 'latent_strength_ssm', line 52, column 8 to column 15)",
  " (in 'latent_strength_ssm', line 52, column 2 to column 59)",
  " (in 'latent_strength_ssm', line 53, column 8 to column 15)",
  " (in 'latent_strength_ssm', line 53, column 2 to column 58)",
  " (in 'latent_strength_ssm', line 57, column 4 to column 24)",
  " (in 'latent_strength_ssm', line 58, column 4 to column 26)",
  " (in 'latent_strength_ssm', line 60, column 6 to column 28)",
  " (in 'latent_strength_ssm', line 59, column 4 to line 60, column 28)",
  " (in 'latent_strength_ssm', line 62, column 6 to column 27)",
  " (in 'latent_strength_ssm', line 61, column 4 to line 62, column 27)",
  " (in 'latent_strength_ssm', line 64, column 6 to column 26)",
  " (in 'latent_strength_ssm', line 63, column 4 to line 64, column 26)",
  " (in 'latent_strength_ssm', line 56, column 25 to line 65, column 3)",
  " (in 'latent_strength_ssm', line 56, column 2 to line 65, column 3)",
  " (in 'latent_strength_ssm', line 66, column 2 to column 23)",
  " (in 'latent_strength_ssm', line 70, column 2 to column 60)",
  " (in 'latent_strength_ssm', line 76, column 9 to column 22)",
  " (in 'latent_strength_ssm', line 80, column 8 to column 17)",
  " (in 'latent_strength_ssm', line 80, column 38 to column 45)",
  " (in 'latent_strength_ssm', line 84, column 21 to column 28)",
  " (in 'latent_strength_ssm', line 88, column 8 to column 19)",
  " (in 'latent_strength_ssm', line 88, column 40 to column 47)",
  " (in 'latent_strength_ssm', line 92, column 8 to column 21)",
  " (in 'latent_strength_ssm', line 92, column 42 to column 49)",
  " (in 'latent_strength_ssm', line 101, column 9 to column 18)",
  " (in 'latent_strength_ssm', line 108, column 8 to column 17)",
  " (in 'latent_strength_ssm', line 108, column 26 to column 33)",
  " (in 'latent_strength_ssm', line 114, column 8 to column 15)",
  " (in 'latent_strength_ssm', line 114, column 24 to column 31)",
  " (in 'latent_strength_ssm', line 130, column 9 to column 16)",
  " (in 'latent_strength_ssm', line 169, column 9 to column 16)",
  " (in 'latent_strength_ssm', line 170, column 9 to column 16)",
  " (in 'latent_strength_ssm', line 175, column 9 to column 16)",
  " (in 'latent_strength_ssm', line 176, column 9 to column 16)",
  " (in 'latent_strength_ssm', line 219, column 9 to column 16)",
  " (in 'latent_strength_ssm', line 12, column 11 to column 18)",
  " (in 'latent_strength_ssm', line 12, column 4 to column 23)",
  " (in 'latent_strength_ssm', line 14, column 6 to column 26)",
  " (in 'latent_strength_ssm', line 15, column 6 to column 28)",
  " (in 'latent_strength_ssm', line 16, column 6 to column 27)",
  " (in 'latent_strength_ssm', line 17, column 6 to column 27)",
  " (in 'latent_strength_ssm', line 18, column 6 to column 56)",
  " (in 'latent_strength_ssm', line 20, column 8 to column 32)",
  " (in 'latent_strength_ssm', line 19, column 23 to line 21, column 7)",
  " (in 'latent_strength_ssm', line 19, column 6 to line 21, column 7)",
  " (in 'latent_strength_ssm', line 13, column 27 to line 22, column 5)",
  " (in 'latent_strength_ssm', line 13, column 4 to line 22, column 5)",
  " (in 'latent_strength_ssm', line 23, column 4 to column 14)",
  " (in 'latent_strength_ssm', line 11, column 58 to line 24, column 3)"};
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__, typename T7__,
          stan::require_all_t<stan::is_std_vector<T0__>,
                              std::is_integral<std::decay_t<stan::value_type_t<T0__>>>,
                              stan::is_std_vector<T1__>,
                              std::is_integral<std::decay_t<stan::value_type_t<T1__>>>,
                              stan::is_std_vector<T2__>,
                              std::is_integral<std::decay_t<stan::value_type_t<T2__>>>,
                              stan::is_std_vector<T3__>,
                              std::is_integral<std::decay_t<stan::value_type_t<T3__>>>,
                              stan::is_std_vector<T4__>,
                              std::is_integral<std::decay_t<stan::value_type_t<T4__>>>,
                              stan::is_std_vector<T5__>,
                              stan::is_col_vector<stan::value_type_t<T5__>>,
                              stan::is_vt_not_complex<stan::value_type_t<T5__>>,
                              stan::is_std_vector<T6__>,
                              stan::is_col_vector<stan::value_type_t<T6__>>,
                              stan::is_vt_not_complex<stan::value_type_t<T6__>>,
                              std::is_integral<std::decay_t<T7__>>>* = nullptr>
Eigen::Matrix<stan::return_type_t<stan::base_type_t<T5__>,
                stan::base_type_t<T6__>>,-1,1>
compute_mu(const T0__& home_team, const T1__& away_team, const T2__&
           week_idx, const T3__& season_idx, const T4__& hfa, const T5__&
           team_strength, const T6__& team_hfa, const T7__& N_games,
           std::ostream* pstream__);
/* vector
   compute_mu(array[] int, array[] int, array[] int, array[] int, array[]
  int,
              array[] vector, array[] vector, int)
 */
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__, typename T7__,
          stan::require_all_t<stan::is_std_vector<T0__>,
                              std::is_integral<std::decay_t<stan::value_type_t<T0__>>>,
                              stan::is_std_vector<T1__>,
                              std::is_integral<std::decay_t<stan::value_type_t<T1__>>>,
                              stan::is_std_vector<T2__>,
                              std::is_integral<std::decay_t<stan::value_type_t<T2__>>>,
                              stan::is_std_vector<T3__>,
                              std::is_integral<std::decay_t<stan::value_type_t<T3__>>>,
                              stan::is_std_vector<T4__>,
                              std::is_integral<std::decay_t<stan::value_type_t<T4__>>>,
                              stan::is_std_vector<T5__>,
                              stan::is_col_vector<stan::value_type_t<T5__>>,
                              stan::is_vt_not_complex<stan::value_type_t<T5__>>,
                              stan::is_std_vector<T6__>,
                              stan::is_col_vector<stan::value_type_t<T6__>>,
                              stan::is_vt_not_complex<stan::value_type_t<T6__>>,
                              std::is_integral<std::decay_t<T7__>>>*>
Eigen::Matrix<stan::return_type_t<stan::base_type_t<T5__>,
                stan::base_type_t<T6__>>,-1,1>
compute_mu(const T0__& home_team, const T1__& away_team, const T2__&
           week_idx, const T3__& season_idx, const T4__& hfa, const T5__&
           team_strength, const T6__& team_hfa, const T7__& N_games,
           std::ostream* pstream__) {
  using local_scalar_t__ = stan::return_type_t<stan::base_type_t<T5__>,
                             stan::base_type_t<T6__>>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 158;
    stan::math::validate_non_negative_index("mu", "N_games", N_games);
    Eigen::Matrix<local_scalar_t__,-1,1> mu =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_games, DUMMY_VAR__);
    current_statement__ = 169;
    for (int g = 1; g <= N_games; ++g) {
      int w = std::numeric_limits<int>::min();
      current_statement__ = 160;
      w = stan::model::rvalue(week_idx, "week_idx", stan::model::index_uni(g));
      int s = std::numeric_limits<int>::min();
      current_statement__ = 161;
      s = stan::model::rvalue(season_idx, "season_idx",
            stan::model::index_uni(g));
      int h = std::numeric_limits<int>::min();
      current_statement__ = 162;
      h = stan::model::rvalue(home_team, "home_team",
            stan::model::index_uni(g));
      int a = std::numeric_limits<int>::min();
      current_statement__ = 163;
      a = stan::model::rvalue(away_team, "away_team",
            stan::model::index_uni(g));
      current_statement__ = 164;
      stan::model::assign(mu,
        (stan::model::rvalue(
           stan::model::rvalue(team_strength, "team_strength",
             stan::model::index_uni(w)), "team_strength[w]",
           stan::model::index_uni(h)) -
        stan::model::rvalue(
          stan::model::rvalue(team_strength, "team_strength",
            stan::model::index_uni(w)), "team_strength[w]",
          stan::model::index_uni(a))), "assigning variable mu",
        stan::model::index_uni(g));
      current_statement__ = 167;
      if (stan::math::logical_eq(
            stan::model::rvalue(hfa, "hfa", stan::model::index_uni(g)), 1)) {
        current_statement__ = 165;
        stan::model::assign(mu,
          (stan::model::rvalue(mu, "mu", stan::model::index_uni(g)) +
          stan::model::rvalue(
            stan::model::rvalue(team_hfa, "team_hfa",
              stan::model::index_uni(s)), "team_hfa[s]",
            stan::model::index_uni(h))), "assigning variable mu",
          stan::model::index_uni(g));
      }
    }
    current_statement__ = 170;
    return mu;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_latent_strength_ssm final : public model_base_crtp<model_latent_strength_ssm> {
private:
  int N_games;
  int N_teams;
  int N_seasons;
  int N_weeks;
  std::vector<int> home_team;
  std::vector<int> away_team;
  std::vector<int> season_idx;
  std::vector<int> week_idx;
  std::vector<int> fw_season_idx;
  std::vector<int> lw_season_idx;
  std::vector<int> hfa;
  std::vector<int> home_score;
  std::vector<int> away_score;
  std::vector<int> total;
  std::vector<int> result;
  std::vector<int> week_to_season;
  std::vector<int> is_first_week;
  std::vector<int> is_last_week;
  double sum_to_zero_scale;
  int z_league_hfa_innovation_1dim__;
  int z_weekly_team_strength_innovation_1dim__;
  int z_season_team_strength_innovation_1dim__;
public:
  ~model_latent_strength_ssm() {}
  model_latent_strength_ssm(stan::io::var_context& context__, unsigned int
                            random_seed__ = 0, std::ostream*
                            pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    using local_scalar_t__ = double;
    auto base_rng__ = stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_latent_strength_ssm_namespace::model_latent_strength_ssm";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 95;
      context__.validate_dims("data initialization", "N_games", "int",
        std::vector<size_t>{});
      N_games = std::numeric_limits<int>::min();
      current_statement__ = 95;
      N_games = context__.vals_i("N_games")[(1 - 1)];
      current_statement__ = 95;
      stan::math::check_greater_or_equal(function__, "N_games", N_games, 1);
      current_statement__ = 96;
      context__.validate_dims("data initialization", "N_teams", "int",
        std::vector<size_t>{});
      N_teams = std::numeric_limits<int>::min();
      current_statement__ = 96;
      N_teams = context__.vals_i("N_teams")[(1 - 1)];
      current_statement__ = 96;
      stan::math::check_greater_or_equal(function__, "N_teams", N_teams, 2);
      current_statement__ = 97;
      context__.validate_dims("data initialization", "N_seasons", "int",
        std::vector<size_t>{});
      N_seasons = std::numeric_limits<int>::min();
      current_statement__ = 97;
      N_seasons = context__.vals_i("N_seasons")[(1 - 1)];
      current_statement__ = 97;
      stan::math::check_greater_or_equal(function__, "N_seasons", N_seasons,
        1);
      current_statement__ = 98;
      context__.validate_dims("data initialization", "N_weeks", "int",
        std::vector<size_t>{});
      N_weeks = std::numeric_limits<int>::min();
      current_statement__ = 98;
      N_weeks = context__.vals_i("N_weeks")[(1 - 1)];
      current_statement__ = 98;
      stan::math::check_greater_or_equal(function__, "N_weeks", N_weeks, 1);
      current_statement__ = 99;
      stan::math::validate_non_negative_index("home_team", "N_games", N_games);
      current_statement__ = 100;
      context__.validate_dims("data initialization", "home_team", "int",
        std::vector<size_t>{static_cast<size_t>(N_games)});
      home_team = std::vector<int>(N_games, std::numeric_limits<int>::min());
      current_statement__ = 100;
      home_team = context__.vals_i("home_team");
      current_statement__ = 100;
      stan::math::check_greater_or_equal(function__, "home_team", home_team,
        1);
      current_statement__ = 100;
      stan::math::check_less_or_equal(function__, "home_team", home_team,
        N_teams);
      current_statement__ = 101;
      stan::math::validate_non_negative_index("away_team", "N_games", N_games);
      current_statement__ = 102;
      context__.validate_dims("data initialization", "away_team", "int",
        std::vector<size_t>{static_cast<size_t>(N_games)});
      away_team = std::vector<int>(N_games, std::numeric_limits<int>::min());
      current_statement__ = 102;
      away_team = context__.vals_i("away_team");
      current_statement__ = 102;
      stan::math::check_greater_or_equal(function__, "away_team", away_team,
        1);
      current_statement__ = 102;
      stan::math::check_less_or_equal(function__, "away_team", away_team,
        N_teams);
      current_statement__ = 103;
      stan::math::validate_non_negative_index("season_idx", "N_games",
        N_games);
      current_statement__ = 104;
      context__.validate_dims("data initialization", "season_idx", "int",
        std::vector<size_t>{static_cast<size_t>(N_games)});
      season_idx = std::vector<int>(N_games, std::numeric_limits<int>::min());
      current_statement__ = 104;
      season_idx = context__.vals_i("season_idx");
      current_statement__ = 104;
      stan::math::check_greater_or_equal(function__, "season_idx",
        season_idx, 1);
      current_statement__ = 104;
      stan::math::check_less_or_equal(function__, "season_idx", season_idx,
        N_seasons);
      current_statement__ = 105;
      stan::math::validate_non_negative_index("week_idx", "N_games", N_games);
      current_statement__ = 106;
      context__.validate_dims("data initialization", "week_idx", "int",
        std::vector<size_t>{static_cast<size_t>(N_games)});
      week_idx = std::vector<int>(N_games, std::numeric_limits<int>::min());
      current_statement__ = 106;
      week_idx = context__.vals_i("week_idx");
      current_statement__ = 106;
      stan::math::check_greater_or_equal(function__, "week_idx", week_idx, 1);
      current_statement__ = 106;
      stan::math::check_less_or_equal(function__, "week_idx", week_idx,
        N_weeks);
      current_statement__ = 107;
      stan::math::validate_non_negative_index("fw_season_idx", "N_games",
        N_games);
      current_statement__ = 108;
      context__.validate_dims("data initialization", "fw_season_idx", "int",
        std::vector<size_t>{static_cast<size_t>(N_games)});
      fw_season_idx = std::vector<int>(N_games,
                        std::numeric_limits<int>::min());
      current_statement__ = 108;
      fw_season_idx = context__.vals_i("fw_season_idx");
      current_statement__ = 108;
      stan::math::check_greater_or_equal(function__, "fw_season_idx",
        fw_season_idx, 0);
      current_statement__ = 108;
      stan::math::check_less_or_equal(function__, "fw_season_idx",
        fw_season_idx, 1);
      current_statement__ = 109;
      stan::math::validate_non_negative_index("lw_season_idx", "N_games",
        N_games);
      current_statement__ = 110;
      context__.validate_dims("data initialization", "lw_season_idx", "int",
        std::vector<size_t>{static_cast<size_t>(N_games)});
      lw_season_idx = std::vector<int>(N_games,
                        std::numeric_limits<int>::min());
      current_statement__ = 110;
      lw_season_idx = context__.vals_i("lw_season_idx");
      current_statement__ = 110;
      stan::math::check_greater_or_equal(function__, "lw_season_idx",
        lw_season_idx, 0);
      current_statement__ = 110;
      stan::math::check_less_or_equal(function__, "lw_season_idx",
        lw_season_idx, 1);
      current_statement__ = 111;
      stan::math::validate_non_negative_index("hfa", "N_games", N_games);
      current_statement__ = 112;
      context__.validate_dims("data initialization", "hfa", "int",
        std::vector<size_t>{static_cast<size_t>(N_games)});
      hfa = std::vector<int>(N_games, std::numeric_limits<int>::min());
      current_statement__ = 112;
      hfa = context__.vals_i("hfa");
      current_statement__ = 112;
      stan::math::check_greater_or_equal(function__, "hfa", hfa, 0);
      current_statement__ = 112;
      stan::math::check_less_or_equal(function__, "hfa", hfa, 1);
      current_statement__ = 113;
      stan::math::validate_non_negative_index("home_score", "N_games",
        N_games);
      current_statement__ = 114;
      context__.validate_dims("data initialization", "home_score", "int",
        std::vector<size_t>{static_cast<size_t>(N_games)});
      home_score = std::vector<int>(N_games, std::numeric_limits<int>::min());
      current_statement__ = 114;
      home_score = context__.vals_i("home_score");
      current_statement__ = 114;
      stan::math::check_greater_or_equal(function__, "home_score",
        home_score, 0);
      current_statement__ = 115;
      stan::math::validate_non_negative_index("away_score", "N_games",
        N_games);
      current_statement__ = 116;
      context__.validate_dims("data initialization", "away_score", "int",
        std::vector<size_t>{static_cast<size_t>(N_games)});
      away_score = std::vector<int>(N_games, std::numeric_limits<int>::min());
      current_statement__ = 116;
      away_score = context__.vals_i("away_score");
      current_statement__ = 116;
      stan::math::check_greater_or_equal(function__, "away_score",
        away_score, 0);
      current_statement__ = 117;
      stan::math::validate_non_negative_index("total", "N_games", N_games);
      current_statement__ = 118;
      context__.validate_dims("data initialization", "total", "int",
        std::vector<size_t>{static_cast<size_t>(N_games)});
      total = std::vector<int>(N_games, std::numeric_limits<int>::min());
      current_statement__ = 118;
      total = context__.vals_i("total");
      current_statement__ = 118;
      stan::math::check_greater_or_equal(function__, "total", total, 0);
      current_statement__ = 119;
      stan::math::validate_non_negative_index("result", "N_games", N_games);
      current_statement__ = 120;
      context__.validate_dims("data initialization", "result", "int",
        std::vector<size_t>{static_cast<size_t>(N_games)});
      result = std::vector<int>(N_games, std::numeric_limits<int>::min());
      current_statement__ = 120;
      result = context__.vals_i("result");
      current_statement__ = 121;
      stan::math::validate_non_negative_index("week_to_season", "N_weeks",
        N_weeks);
      current_statement__ = 122;
      week_to_season = std::vector<int>(N_weeks,
                         std::numeric_limits<int>::min());
      current_statement__ = 122;
      stan::model::assign(week_to_season, stan::math::rep_array(1, N_weeks),
        "assigning variable week_to_season");
      current_statement__ = 123;
      stan::math::validate_non_negative_index("is_first_week", "N_weeks",
        N_weeks);
      current_statement__ = 124;
      is_first_week = std::vector<int>(N_weeks,
                        std::numeric_limits<int>::min());
      current_statement__ = 124;
      stan::model::assign(is_first_week, stan::math::rep_array(0, N_weeks),
        "assigning variable is_first_week");
      current_statement__ = 125;
      stan::math::validate_non_negative_index("is_last_week", "N_weeks",
        N_weeks);
      current_statement__ = 126;
      is_last_week = std::vector<int>(N_weeks,
                       std::numeric_limits<int>::min());
      current_statement__ = 126;
      stan::model::assign(is_last_week, stan::math::rep_array(0, N_weeks),
        "assigning variable is_last_week");
      current_statement__ = 136;
      for (int g = 1; g <= N_games; ++g) {
        int w = std::numeric_limits<int>::min();
        current_statement__ = 127;
        w = stan::model::rvalue(week_idx, "week_idx",
              stan::model::index_uni(g));
        int s = std::numeric_limits<int>::min();
        current_statement__ = 128;
        s = stan::model::rvalue(season_idx, "season_idx",
              stan::model::index_uni(g));
        current_statement__ = 130;
        if (stan::math::logical_gt(s,
              stan::model::rvalue(week_to_season, "week_to_season",
                stan::model::index_uni(w)))) {
          current_statement__ = 129;
          stan::model::assign(week_to_season, s,
            "assigning variable week_to_season", stan::model::index_uni(w));
        }
        current_statement__ = 132;
        if (stan::math::logical_eq(
              stan::model::rvalue(fw_season_idx, "fw_season_idx",
                stan::model::index_uni(g)), 1)) {
          current_statement__ = 131;
          stan::model::assign(is_first_week, 1,
            "assigning variable is_first_week", stan::model::index_uni(w));
        }
        current_statement__ = 134;
        if (stan::math::logical_eq(
              stan::model::rvalue(lw_season_idx, "lw_season_idx",
                stan::model::index_uni(g)), 1)) {
          current_statement__ = 133;
          stan::model::assign(is_last_week, 1,
            "assigning variable is_last_week", stan::model::index_uni(w));
        }
      }
      current_statement__ = 137;
      stan::model::assign(is_first_week, 1,
        "assigning variable is_first_week", stan::model::index_uni(1));
      current_statement__ = 138;
      sum_to_zero_scale = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 138;
      sum_to_zero_scale = stan::math::sqrt((N_teams *
                            stan::math::inv((N_teams - 1))));
      current_statement__ = 139;
      z_league_hfa_innovation_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 139;
      z_league_hfa_innovation_1dim__ = (N_seasons - 1);
      current_statement__ = 139;
      stan::math::validate_non_negative_index("z_league_hfa_innovation",
        "N_seasons - 1", z_league_hfa_innovation_1dim__);
      current_statement__ = 140;
      stan::math::validate_non_negative_index("z_team_hfa_deviation",
        "N_seasons", N_seasons);
      current_statement__ = 141;
      stan::math::validate_non_negative_index("z_team_hfa_deviation",
        "N_teams", N_teams);
      current_statement__ = 142;
      stan::math::validate_non_negative_index("z_team_strength_init",
        "N_teams", N_teams);
      current_statement__ = 143;
      z_weekly_team_strength_innovation_1dim__ = std::numeric_limits<int>::min(
                                                   );
      current_statement__ = 143;
      z_weekly_team_strength_innovation_1dim__ = (N_weeks - 1);
      current_statement__ = 143;
      stan::math::validate_non_negative_index(
        "z_weekly_team_strength_innovation", "N_weeks - 1",
        z_weekly_team_strength_innovation_1dim__);
      current_statement__ = 144;
      stan::math::validate_non_negative_index(
        "z_weekly_team_strength_innovation", "N_teams", N_teams);
      current_statement__ = 145;
      z_season_team_strength_innovation_1dim__ = std::numeric_limits<int>::min(
                                                   );
      current_statement__ = 145;
      z_season_team_strength_innovation_1dim__ = (N_seasons - 1);
      current_statement__ = 145;
      stan::math::validate_non_negative_index(
        "z_season_team_strength_innovation", "N_seasons - 1",
        z_season_team_strength_innovation_1dim__);
      current_statement__ = 146;
      stan::math::validate_non_negative_index(
        "z_season_team_strength_innovation", "N_teams", N_teams);
      current_statement__ = 147;
      stan::math::validate_non_negative_index("league_hfa", "N_seasons",
        N_seasons);
      current_statement__ = 148;
      stan::math::validate_non_negative_index("team_hfa", "N_seasons",
        N_seasons);
      current_statement__ = 149;
      stan::math::validate_non_negative_index("team_hfa", "N_teams", N_teams);
      current_statement__ = 150;
      stan::math::validate_non_negative_index("team_strength", "N_weeks",
        N_weeks);
      current_statement__ = 151;
      stan::math::validate_non_negative_index("team_strength", "N_teams",
        N_teams);
      current_statement__ = 152;
      stan::math::validate_non_negative_index("mu", "N_games", N_games);
      current_statement__ = 153;
      stan::math::validate_non_negative_index("filtered_team_strength",
        "N_teams", N_teams);
      current_statement__ = 154;
      stan::math::validate_non_negative_index("filtered_team_hfa", "N_teams",
        N_teams);
      current_statement__ = 155;
      stan::math::validate_non_negative_index("predicted_team_strength",
        "N_teams", N_teams);
      current_statement__ = 156;
      stan::math::validate_non_negative_index("predicted_team_hfa",
        "N_teams", N_teams);
      current_statement__ = 157;
      stan::math::validate_non_negative_index("log_lik", "N_games", N_games);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + z_league_hfa_innovation_1dim__ + 1 + 1 + (N_seasons
      * (N_teams - 1)) + 1 + (N_teams - 1) + 1 +
      (z_weekly_team_strength_innovation_1dim__ * (N_teams - 1)) + 1 + 1 +
      (z_season_team_strength_innovation_1dim__ * (N_teams - 1)) + 1 + 1 + 1;
  }
  inline std::string model_name() const final {
    return "model_latent_strength_ssm";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.37.0-61-g7c641b3",
             "stancflags = --allow-undefined"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_latent_strength_ssm_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      current_statement__ = 1;
      auto league_hfa_init = in__.template read<local_scalar_t__>();
      current_statement__ = 2;
      auto z_league_hfa_innovation =
        in__.template read<
          Eigen::Matrix<local_scalar_t__,-1,1>>(z_league_hfa_innovation_1dim__);
      current_statement__ = 3;
      auto sigma_league_hfa_innovation =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 4;
      auto phi_league_hfa =
        in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0, 1,
          lp__);
      current_statement__ = 5;
      auto z_team_hfa_deviation =
        in__.template read_constrain_sum_to_zero<
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
          jacobian__>(lp__, N_seasons, N_teams);
      current_statement__ = 6;
      auto sigma_team_hfa =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 7;
      auto z_team_strength_init =
        in__.template read_constrain_sum_to_zero<
          Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__, N_teams);
      current_statement__ = 8;
      auto sigma_team_strength_init =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 9;
      auto z_weekly_team_strength_innovation =
        in__.template read_constrain_sum_to_zero<
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
          jacobian__>(lp__, z_weekly_team_strength_innovation_1dim__,
          N_teams);
      current_statement__ = 10;
      auto sigma_weekly_team_strength_innovation =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 11;
      auto phi_weekly_team_strength_innovation =
        in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0, 1,
          lp__);
      current_statement__ = 12;
      auto z_season_team_strength_innovation =
        in__.template read_constrain_sum_to_zero<
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
          jacobian__>(lp__, z_season_team_strength_innovation_1dim__,
          N_teams);
      current_statement__ = 13;
      auto sigma_season_team_strength_innovation =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 14;
      auto phi_season_team_strength_innovation =
        in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0, 1,
          lp__);
      current_statement__ = 15;
      auto sigma_obs =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> league_hfa =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_seasons,
          DUMMY_VAR__);
      current_statement__ = 29;
      stan::model::assign(league_hfa, league_hfa_init,
        "assigning variable league_hfa", stan::model::index_uni(1));
      current_statement__ = 32;
      for (int s = 2; s <= N_seasons; ++s) {
        current_statement__ = 30;
        stan::model::assign(league_hfa, ((phi_league_hfa *
          stan::model::rvalue(league_hfa, "league_hfa",
            stan::model::index_uni((s - 1)))) +
          (stan::model::rvalue(z_league_hfa_innovation,
             "z_league_hfa_innovation", stan::model::index_uni((s - 1))) *
          sigma_league_hfa_innovation)), "assigning variable league_hfa",
          stan::model::index_uni(s));
      }
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> team_hfa =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N_seasons,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_teams,
            DUMMY_VAR__));
      current_statement__ = 35;
      for (int s = 1; s <= N_seasons; ++s) {
        current_statement__ = 33;
        stan::model::assign(team_hfa,
          stan::math::add(
            stan::model::rvalue(league_hfa, "league_hfa",
              stan::model::index_uni(s)),
            stan::math::multiply(
              stan::model::rvalue(z_team_hfa_deviation,
                "z_team_hfa_deviation", stan::model::index_uni(s)),
              sigma_team_hfa)), "assigning variable team_hfa",
          stan::model::index_uni(s));
      }
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> team_strength =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N_weeks,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_teams,
            DUMMY_VAR__));
      current_statement__ = 36;
      stan::model::assign(team_strength,
        stan::math::multiply(z_team_strength_init, sigma_team_strength_init),
        "assigning variable team_strength", stan::model::index_uni(1));
      current_statement__ = 44;
      for (int w = 2; w <= N_weeks; ++w) {
        current_statement__ = 42;
        if (stan::math::logical_eq(
              stan::model::rvalue(is_first_week, "is_first_week",
                stan::model::index_uni(w)), 1)) {
          int s = std::numeric_limits<int>::min();
          current_statement__ = 39;
          s = stan::model::rvalue(week_to_season, "week_to_season",
                stan::model::index_uni(w));
          current_statement__ = 40;
          stan::model::assign(team_strength,
            stan::math::add(
              stan::math::multiply(phi_season_team_strength_innovation,
                stan::model::deep_copy(
                  stan::model::rvalue(team_strength, "team_strength",
                    stan::model::index_uni((w - 1))))),
              stan::math::multiply(
                stan::model::rvalue(z_season_team_strength_innovation,
                  "z_season_team_strength_innovation",
                  stan::model::index_uni((s - 1))),
                sigma_season_team_strength_innovation)),
            "assigning variable team_strength", stan::model::index_uni(w));
        } else {
          current_statement__ = 37;
          stan::model::assign(team_strength,
            stan::math::add(
              stan::math::multiply(phi_weekly_team_strength_innovation,
                stan::model::deep_copy(
                  stan::model::rvalue(team_strength, "team_strength",
                    stan::model::index_uni((w - 1))))),
              stan::math::multiply(
                stan::model::rvalue(z_weekly_team_strength_innovation,
                  "z_weekly_team_strength_innovation",
                  stan::model::index_uni((w - 1))),
                sigma_weekly_team_strength_innovation)),
            "assigning variable team_strength", stan::model::index_uni(w));
        }
      }
      Eigen::Matrix<local_scalar_t__,-1,1> mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_games, DUMMY_VAR__);
      current_statement__ = 19;
      stan::model::assign(mu,
        compute_mu(home_team, away_team, week_idx, season_idx, hfa,
          team_strength, team_hfa, N_games, pstream__),
        "assigning variable mu");
      {
        current_statement__ = 76;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(league_hfa_init, 3,
                         2));
        current_statement__ = 77;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(
                         z_league_hfa_innovation));
        current_statement__ = 78;
        lp_accum__.add(stan::math::student_t_lpdf<propto__>(
                         sigma_league_hfa_innovation, 3, 0, 2));
        current_statement__ = 79;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(phi_league_hfa, 8, 2));
        current_statement__ = 81;
        for (int s = 1; s <= N_seasons; ++s) {
          current_statement__ = 80;
          lp_accum__.add(stan::math::std_normal_lpdf<propto__>(
                           stan::model::rvalue(z_team_hfa_deviation,
                             "z_team_hfa_deviation",
                             stan::model::index_uni(s))));
        }
        current_statement__ = 82;
        lp_accum__.add(stan::math::student_t_lpdf<propto__>(sigma_team_hfa,
                         3, 0, 2));
        current_statement__ = 83;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(
                         z_team_strength_init));
        current_statement__ = 84;
        lp_accum__.add(stan::math::student_t_lpdf<propto__>(
                         sigma_team_strength_init, 3, 0, 5));
        current_statement__ = 86;
        for (int w = 1; w <= (N_weeks - 1); ++w) {
          current_statement__ = 85;
          lp_accum__.add(stan::math::std_normal_lpdf<propto__>(
                           stan::model::rvalue(
                             z_weekly_team_strength_innovation,
                             "z_weekly_team_strength_innovation",
                             stan::model::index_uni(w))));
        }
        current_statement__ = 87;
        lp_accum__.add(stan::math::student_t_lpdf<propto__>(
                         sigma_weekly_team_strength_innovation, 3, 0, 2));
        current_statement__ = 88;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         phi_weekly_team_strength_innovation, 9, 1));
        current_statement__ = 90;
        for (int s = 1; s <= (N_seasons - 1); ++s) {
          current_statement__ = 89;
          lp_accum__.add(stan::math::std_normal_lpdf<propto__>(
                           stan::model::rvalue(
                             z_season_team_strength_innovation,
                             "z_season_team_strength_innovation",
                             stan::model::index_uni(s))));
        }
        current_statement__ = 91;
        lp_accum__.add(stan::math::student_t_lpdf<propto__>(
                         sigma_season_team_strength_innovation, 3, 0, 5));
        current_statement__ = 92;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         phi_season_team_strength_innovation, 6, 4));
        current_statement__ = 93;
        lp_accum__.add(stan::math::student_t_lpdf<propto__>(sigma_obs, 3, 0,
                         10));
        current_statement__ = 94;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         stan::math::promote_scalar<double>(result), mu,
                         sigma_obs));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_latent_strength_ssm_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      current_statement__ = 1;
      auto league_hfa_init = in__.template read<local_scalar_t__>();
      current_statement__ = 2;
      auto z_league_hfa_innovation =
        in__.template read<
          Eigen::Matrix<local_scalar_t__,-1,1>>(z_league_hfa_innovation_1dim__);
      current_statement__ = 3;
      auto sigma_league_hfa_innovation =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 4;
      auto phi_league_hfa =
        in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0, 1,
          lp__);
      current_statement__ = 5;
      auto z_team_hfa_deviation =
        in__.template read_constrain_sum_to_zero<
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
          jacobian__>(lp__, N_seasons, N_teams);
      current_statement__ = 6;
      auto sigma_team_hfa =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 7;
      auto z_team_strength_init =
        in__.template read_constrain_sum_to_zero<
          Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__, N_teams);
      current_statement__ = 8;
      auto sigma_team_strength_init =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 9;
      auto z_weekly_team_strength_innovation =
        in__.template read_constrain_sum_to_zero<
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
          jacobian__>(lp__, z_weekly_team_strength_innovation_1dim__,
          N_teams);
      current_statement__ = 10;
      auto sigma_weekly_team_strength_innovation =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 11;
      auto phi_weekly_team_strength_innovation =
        in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0, 1,
          lp__);
      current_statement__ = 12;
      auto z_season_team_strength_innovation =
        in__.template read_constrain_sum_to_zero<
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
          jacobian__>(lp__, z_season_team_strength_innovation_1dim__,
          N_teams);
      current_statement__ = 13;
      auto sigma_season_team_strength_innovation =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 14;
      auto phi_season_team_strength_innovation =
        in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0, 1,
          lp__);
      current_statement__ = 15;
      auto sigma_obs =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> league_hfa =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_seasons,
          DUMMY_VAR__);
      current_statement__ = 29;
      stan::model::assign(league_hfa, league_hfa_init,
        "assigning variable league_hfa", stan::model::index_uni(1));
      current_statement__ = 32;
      for (int s = 2; s <= N_seasons; ++s) {
        current_statement__ = 30;
        stan::model::assign(league_hfa, ((phi_league_hfa *
          stan::model::rvalue(league_hfa, "league_hfa",
            stan::model::index_uni((s - 1)))) +
          (stan::model::rvalue(z_league_hfa_innovation,
             "z_league_hfa_innovation", stan::model::index_uni((s - 1))) *
          sigma_league_hfa_innovation)), "assigning variable league_hfa",
          stan::model::index_uni(s));
      }
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> team_hfa =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N_seasons,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_teams,
            DUMMY_VAR__));
      current_statement__ = 35;
      for (int s = 1; s <= N_seasons; ++s) {
        current_statement__ = 33;
        stan::model::assign(team_hfa,
          stan::math::add(
            stan::model::rvalue(league_hfa, "league_hfa",
              stan::model::index_uni(s)),
            stan::math::multiply(
              stan::model::rvalue(z_team_hfa_deviation,
                "z_team_hfa_deviation", stan::model::index_uni(s)),
              sigma_team_hfa)), "assigning variable team_hfa",
          stan::model::index_uni(s));
      }
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> team_strength =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N_weeks,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_teams,
            DUMMY_VAR__));
      current_statement__ = 36;
      stan::model::assign(team_strength,
        stan::math::multiply(z_team_strength_init, sigma_team_strength_init),
        "assigning variable team_strength", stan::model::index_uni(1));
      current_statement__ = 44;
      for (int w = 2; w <= N_weeks; ++w) {
        current_statement__ = 42;
        if (stan::math::logical_eq(
              stan::model::rvalue(is_first_week, "is_first_week",
                stan::model::index_uni(w)), 1)) {
          int s = std::numeric_limits<int>::min();
          current_statement__ = 39;
          s = stan::model::rvalue(week_to_season, "week_to_season",
                stan::model::index_uni(w));
          current_statement__ = 40;
          stan::model::assign(team_strength,
            stan::math::add(
              stan::math::multiply(phi_season_team_strength_innovation,
                stan::model::deep_copy(
                  stan::model::rvalue(team_strength, "team_strength",
                    stan::model::index_uni((w - 1))))),
              stan::math::multiply(
                stan::model::rvalue(z_season_team_strength_innovation,
                  "z_season_team_strength_innovation",
                  stan::model::index_uni((s - 1))),
                sigma_season_team_strength_innovation)),
            "assigning variable team_strength", stan::model::index_uni(w));
        } else {
          current_statement__ = 37;
          stan::model::assign(team_strength,
            stan::math::add(
              stan::math::multiply(phi_weekly_team_strength_innovation,
                stan::model::deep_copy(
                  stan::model::rvalue(team_strength, "team_strength",
                    stan::model::index_uni((w - 1))))),
              stan::math::multiply(
                stan::model::rvalue(z_weekly_team_strength_innovation,
                  "z_weekly_team_strength_innovation",
                  stan::model::index_uni((w - 1))),
                sigma_weekly_team_strength_innovation)),
            "assigning variable team_strength", stan::model::index_uni(w));
        }
      }
      Eigen::Matrix<local_scalar_t__,-1,1> mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_games, DUMMY_VAR__);
      current_statement__ = 19;
      stan::model::assign(mu,
        compute_mu(home_team, away_team, week_idx, season_idx, hfa,
          team_strength, team_hfa, N_games, pstream__),
        "assigning variable mu");
      {
        current_statement__ = 76;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(league_hfa_init, 3,
                         2));
        current_statement__ = 77;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(
                         z_league_hfa_innovation));
        current_statement__ = 78;
        lp_accum__.add(stan::math::student_t_lpdf<propto__>(
                         sigma_league_hfa_innovation, 3, 0, 2));
        current_statement__ = 79;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(phi_league_hfa, 8, 2));
        current_statement__ = 81;
        for (int s = 1; s <= N_seasons; ++s) {
          current_statement__ = 80;
          lp_accum__.add(stan::math::std_normal_lpdf<propto__>(
                           stan::model::rvalue(z_team_hfa_deviation,
                             "z_team_hfa_deviation",
                             stan::model::index_uni(s))));
        }
        current_statement__ = 82;
        lp_accum__.add(stan::math::student_t_lpdf<propto__>(sigma_team_hfa,
                         3, 0, 2));
        current_statement__ = 83;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(
                         z_team_strength_init));
        current_statement__ = 84;
        lp_accum__.add(stan::math::student_t_lpdf<propto__>(
                         sigma_team_strength_init, 3, 0, 5));
        current_statement__ = 86;
        for (int w = 1; w <= (N_weeks - 1); ++w) {
          current_statement__ = 85;
          lp_accum__.add(stan::math::std_normal_lpdf<propto__>(
                           stan::model::rvalue(
                             z_weekly_team_strength_innovation,
                             "z_weekly_team_strength_innovation",
                             stan::model::index_uni(w))));
        }
        current_statement__ = 87;
        lp_accum__.add(stan::math::student_t_lpdf<propto__>(
                         sigma_weekly_team_strength_innovation, 3, 0, 2));
        current_statement__ = 88;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         phi_weekly_team_strength_innovation, 9, 1));
        current_statement__ = 90;
        for (int s = 1; s <= (N_seasons - 1); ++s) {
          current_statement__ = 89;
          lp_accum__.add(stan::math::std_normal_lpdf<propto__>(
                           stan::model::rvalue(
                             z_season_team_strength_innovation,
                             "z_season_team_strength_innovation",
                             stan::model::index_uni(s))));
        }
        current_statement__ = 91;
        lp_accum__.add(stan::math::student_t_lpdf<propto__>(
                         sigma_season_team_strength_innovation, 3, 0, 5));
        current_statement__ = 92;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         phi_season_team_strength_innovation, 6, 4));
        current_statement__ = 93;
        lp_accum__.add(stan::math::student_t_lpdf<propto__>(sigma_obs, 3, 0,
                         10));
        current_statement__ = 94;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         stan::math::promote_scalar<double>(result), mu,
                         sigma_obs));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "model_latent_strength_ssm_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      current_statement__ = 1;
      auto league_hfa_init = in__.template read<local_scalar_t__>();
      current_statement__ = 2;
      auto z_league_hfa_innovation =
        in__.template read<
          Eigen::Matrix<local_scalar_t__,-1,1>>(z_league_hfa_innovation_1dim__);
      current_statement__ = 3;
      auto sigma_league_hfa_innovation =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 4;
      auto phi_league_hfa =
        in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0, 1,
          lp__);
      current_statement__ = 5;
      auto z_team_hfa_deviation =
        in__.template read_constrain_sum_to_zero<
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
          jacobian__>(lp__, N_seasons, N_teams);
      current_statement__ = 6;
      auto sigma_team_hfa =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 7;
      auto z_team_strength_init =
        in__.template read_constrain_sum_to_zero<
          Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__, N_teams);
      current_statement__ = 8;
      auto sigma_team_strength_init =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 9;
      auto z_weekly_team_strength_innovation =
        in__.template read_constrain_sum_to_zero<
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
          jacobian__>(lp__, z_weekly_team_strength_innovation_1dim__,
          N_teams);
      current_statement__ = 10;
      auto sigma_weekly_team_strength_innovation =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 11;
      auto phi_weekly_team_strength_innovation =
        in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0, 1,
          lp__);
      current_statement__ = 12;
      auto z_season_team_strength_innovation =
        in__.template read_constrain_sum_to_zero<
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
          jacobian__>(lp__, z_season_team_strength_innovation_1dim__,
          N_teams);
      current_statement__ = 13;
      auto sigma_season_team_strength_innovation =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 14;
      auto phi_season_team_strength_innovation =
        in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0, 1,
          lp__);
      current_statement__ = 15;
      auto sigma_obs =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      Eigen::Matrix<double,-1,1> league_hfa =
        Eigen::Matrix<double,-1,1>::Constant(N_seasons,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<Eigen::Matrix<double,-1,1>> team_hfa =
        std::vector<Eigen::Matrix<double,-1,1>>(N_seasons,
          Eigen::Matrix<double,-1,1>::Constant(N_teams,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double,-1,1>> team_strength =
        std::vector<Eigen::Matrix<double,-1,1>>(N_weeks,
          Eigen::Matrix<double,-1,1>::Constant(N_teams,
            std::numeric_limits<double>::quiet_NaN()));
      Eigen::Matrix<double,-1,1> mu =
        Eigen::Matrix<double,-1,1>::Constant(N_games,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(league_hfa_init);
      out__.write(z_league_hfa_innovation);
      out__.write(sigma_league_hfa_innovation);
      out__.write(phi_league_hfa);
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_seasons; ++sym2__) {
          out__.write(z_team_hfa_deviation[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(sigma_team_hfa);
      out__.write(z_team_strength_init);
      out__.write(sigma_team_strength_init);
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
        for (int sym2__ = 1; sym2__ <=
             z_weekly_team_strength_innovation_1dim__; ++sym2__) {
          out__.write(z_weekly_team_strength_innovation[(sym2__ - 1)][(sym1__
            - 1)]);
        }
      }
      out__.write(sigma_weekly_team_strength_innovation);
      out__.write(phi_weekly_team_strength_innovation);
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
        for (int sym2__ = 1; sym2__ <=
             z_season_team_strength_innovation_1dim__; ++sym2__) {
          out__.write(z_season_team_strength_innovation[(sym2__ - 1)][(sym1__
            - 1)]);
        }
      }
      out__.write(sigma_season_team_strength_innovation);
      out__.write(phi_season_team_strength_innovation);
      out__.write(sigma_obs);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 29;
      stan::model::assign(league_hfa, league_hfa_init,
        "assigning variable league_hfa", stan::model::index_uni(1));
      current_statement__ = 32;
      for (int s = 2; s <= N_seasons; ++s) {
        current_statement__ = 30;
        stan::model::assign(league_hfa, ((phi_league_hfa *
          stan::model::rvalue(league_hfa, "league_hfa",
            stan::model::index_uni((s - 1)))) +
          (stan::model::rvalue(z_league_hfa_innovation,
             "z_league_hfa_innovation", stan::model::index_uni((s - 1))) *
          sigma_league_hfa_innovation)), "assigning variable league_hfa",
          stan::model::index_uni(s));
      }
      current_statement__ = 35;
      for (int s = 1; s <= N_seasons; ++s) {
        current_statement__ = 33;
        stan::model::assign(team_hfa,
          stan::math::add(
            stan::model::rvalue(league_hfa, "league_hfa",
              stan::model::index_uni(s)),
            stan::math::multiply(
              stan::model::rvalue(z_team_hfa_deviation,
                "z_team_hfa_deviation", stan::model::index_uni(s)),
              sigma_team_hfa)), "assigning variable team_hfa",
          stan::model::index_uni(s));
      }
      current_statement__ = 36;
      stan::model::assign(team_strength,
        stan::math::multiply(z_team_strength_init, sigma_team_strength_init),
        "assigning variable team_strength", stan::model::index_uni(1));
      current_statement__ = 44;
      for (int w = 2; w <= N_weeks; ++w) {
        current_statement__ = 42;
        if (stan::math::logical_eq(
              stan::model::rvalue(is_first_week, "is_first_week",
                stan::model::index_uni(w)), 1)) {
          int s = std::numeric_limits<int>::min();
          current_statement__ = 39;
          s = stan::model::rvalue(week_to_season, "week_to_season",
                stan::model::index_uni(w));
          current_statement__ = 40;
          stan::model::assign(team_strength,
            stan::math::add(
              stan::math::multiply(phi_season_team_strength_innovation,
                stan::model::deep_copy(
                  stan::model::rvalue(team_strength, "team_strength",
                    stan::model::index_uni((w - 1))))),
              stan::math::multiply(
                stan::model::rvalue(z_season_team_strength_innovation,
                  "z_season_team_strength_innovation",
                  stan::model::index_uni((s - 1))),
                sigma_season_team_strength_innovation)),
            "assigning variable team_strength", stan::model::index_uni(w));
        } else {
          current_statement__ = 37;
          stan::model::assign(team_strength,
            stan::math::add(
              stan::math::multiply(phi_weekly_team_strength_innovation,
                stan::model::deep_copy(
                  stan::model::rvalue(team_strength, "team_strength",
                    stan::model::index_uni((w - 1))))),
              stan::math::multiply(
                stan::model::rvalue(z_weekly_team_strength_innovation,
                  "z_weekly_team_strength_innovation",
                  stan::model::index_uni((w - 1))),
                sigma_weekly_team_strength_innovation)),
            "assigning variable team_strength", stan::model::index_uni(w));
        }
      }
      current_statement__ = 19;
      stan::model::assign(mu,
        compute_mu(home_team, away_team, week_idx, season_idx, hfa,
          team_strength, team_hfa, N_games, pstream__),
        "assigning variable mu");
      if (emit_transformed_parameters__) {
        out__.write(league_hfa);
        current_statement__ = 17;
        for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N_seasons; ++sym2__) {
            out__.write(team_hfa[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        current_statement__ = 18;
        for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N_weeks; ++sym2__) {
            out__.write(team_strength[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        out__.write(mu);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      int last_w = std::numeric_limits<int>::min();
      current_statement__ = 20;
      last_w = stan::math::max(week_idx);
      int last_s = std::numeric_limits<int>::min();
      current_statement__ = 21;
      last_s = stan::model::rvalue(week_to_season, "week_to_season",
                 stan::model::index_uni(last_w));
      Eigen::Matrix<double,-1,1> filtered_team_strength =
        Eigen::Matrix<double,-1,1>::Constant(N_teams,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 22;
      stan::model::assign(filtered_team_strength,
        stan::model::rvalue(team_strength, "team_strength",
          stan::model::index_uni(last_w)),
        "assigning variable filtered_team_strength");
      Eigen::Matrix<double,-1,1> filtered_team_hfa =
        Eigen::Matrix<double,-1,1>::Constant(N_teams,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 23;
      stan::model::assign(filtered_team_hfa,
        stan::model::rvalue(team_hfa, "team_hfa",
          stan::model::index_uni(last_s)),
        "assigning variable filtered_team_hfa");
      double filtered_league_hfa = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 24;
      filtered_league_hfa = stan::model::rvalue(league_hfa, "league_hfa",
                              stan::model::index_uni(last_s));
      Eigen::Matrix<double,-1,1> predicted_team_strength =
        Eigen::Matrix<double,-1,1>::Constant(N_teams,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> predicted_team_hfa =
        Eigen::Matrix<double,-1,1>::Constant(N_teams,
          std::numeric_limits<double>::quiet_NaN());
      double predicted_league_hfa = std::numeric_limits<double>::quiet_NaN();
      {
        int next_is_first = std::numeric_limits<int>::min();
        current_statement__ = 45;
        next_is_first = stan::model::rvalue(is_last_week, "is_last_week",
                          stan::model::index_uni(last_w));
        current_statement__ = 46;
        stan::math::validate_non_negative_index("z_raw", "N_teams - 1",
          (N_teams - 1));
        Eigen::Matrix<double,-1,1> z_raw =
          Eigen::Matrix<double,-1,1>::Constant((N_teams - 1),
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 50;
        for (int t = 1; t <= (N_teams - 1); ++t) {
          current_statement__ = 48;
          stan::model::assign(z_raw,
            stan::math::normal_rng(0, 1, base_rng__),
            "assigning variable z_raw", stan::model::index_uni(t));
        }
        current_statement__ = 51;
        stan::math::validate_non_negative_index("z0", "N_teams", N_teams);
        Eigen::Matrix<double,-1,1> z0 =
          Eigen::Matrix<double,-1,1>::Constant(N_teams,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 52;
        stan::model::assign(z0, stan::math::sum_to_zero_constrain(z_raw),
          "assigning variable z0");
        current_statement__ = 57;
        if (stan::math::logical_eq(next_is_first, 1)) {
          current_statement__ = 55;
          stan::model::assign(predicted_team_strength,
            stan::math::add(
              stan::math::multiply(phi_season_team_strength_innovation,
                stan::model::rvalue(team_strength, "team_strength",
                  stan::model::index_uni(last_w))),
              stan::math::multiply(z0, sigma_season_team_strength_innovation)),
            "assigning variable predicted_team_strength");
        } else {
          current_statement__ = 53;
          stan::model::assign(predicted_team_strength,
            stan::math::add(
              stan::math::multiply(phi_weekly_team_strength_innovation,
                stan::model::rvalue(team_strength, "team_strength",
                  stan::model::index_uni(last_w))),
              stan::math::multiply(z0, sigma_weekly_team_strength_innovation)),
            "assigning variable predicted_team_strength");
        }
        current_statement__ = 71;
        if (stan::math::logical_eq(next_is_first, 1)) {
          current_statement__ = 61;
          predicted_league_hfa = ((phi_league_hfa *
            stan::model::rvalue(league_hfa, "league_hfa",
              stan::model::index_uni(last_s)))
            +
            stan::math::normal_rng(0, sigma_league_hfa_innovation, base_rng__));
          current_statement__ = 62;
          stan::math::validate_non_negative_index("hfa_raw", "N_teams - 1",
            (N_teams - 1));
          Eigen::Matrix<double,-1,1> hfa_raw =
            Eigen::Matrix<double,-1,1>::Constant((N_teams - 1),
              std::numeric_limits<double>::quiet_NaN());
          current_statement__ = 66;
          for (int t = 1; t <= (N_teams - 1); ++t) {
            current_statement__ = 64;
            stan::model::assign(hfa_raw,
              stan::math::normal_rng(0, 1, base_rng__),
              "assigning variable hfa_raw", stan::model::index_uni(t));
          }
          current_statement__ = 67;
          stan::math::validate_non_negative_index("hfa_dev", "N_teams",
            N_teams);
          Eigen::Matrix<double,-1,1> hfa_dev =
            Eigen::Matrix<double,-1,1>::Constant(N_teams,
              std::numeric_limits<double>::quiet_NaN());
          current_statement__ = 68;
          stan::model::assign(hfa_dev,
            stan::math::sum_to_zero_constrain(hfa_raw),
            "assigning variable hfa_dev");
          current_statement__ = 69;
          stan::model::assign(predicted_team_hfa,
            stan::math::add(predicted_league_hfa,
              stan::math::multiply(hfa_dev, sigma_team_hfa)),
            "assigning variable predicted_team_hfa");
        } else {
          current_statement__ = 58;
          predicted_league_hfa = stan::model::rvalue(league_hfa,
                                   "league_hfa",
                                   stan::model::index_uni(last_s));
          current_statement__ = 59;
          stan::model::assign(predicted_team_hfa,
            stan::model::rvalue(team_hfa, "team_hfa",
              stan::model::index_uni(last_s)),
            "assigning variable predicted_team_hfa");
        }
      }
      Eigen::Matrix<double,-1,1> log_lik =
        Eigen::Matrix<double,-1,1>::Constant(N_games,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 75;
      for (int g = 1; g <= N_games; ++g) {
        current_statement__ = 73;
        stan::model::assign(log_lik,
          stan::math::normal_lpdf<false>(
            stan::model::rvalue(result, "result", stan::model::index_uni(g)),
            stan::model::rvalue(mu, "mu", stan::model::index_uni(g)),
            sigma_obs), "assigning variable log_lik",
          stan::model::index_uni(g));
      }
      out__.write(last_w);
      out__.write(last_s);
      out__.write(filtered_team_strength);
      out__.write(filtered_team_hfa);
      out__.write(filtered_league_hfa);
      out__.write(predicted_team_strength);
      out__.write(predicted_team_hfa);
      out__.write(predicted_league_hfa);
      out__.write(log_lik);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      local_scalar_t__ league_hfa_init = DUMMY_VAR__;
      current_statement__ = 1;
      league_hfa_init = in__.read<local_scalar_t__>();
      out__.write(league_hfa_init);
      Eigen::Matrix<local_scalar_t__,-1,1> z_league_hfa_innovation =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(z_league_hfa_innovation_1dim__,
          DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(z_league_hfa_innovation,
        in__.read<
          Eigen::Matrix<local_scalar_t__,-1,1>>(z_league_hfa_innovation_1dim__),
        "assigning variable z_league_hfa_innovation");
      out__.write(z_league_hfa_innovation);
      local_scalar_t__ sigma_league_hfa_innovation = DUMMY_VAR__;
      current_statement__ = 3;
      sigma_league_hfa_innovation = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_league_hfa_innovation);
      local_scalar_t__ phi_league_hfa = DUMMY_VAR__;
      current_statement__ = 4;
      phi_league_hfa = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, phi_league_hfa);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        z_team_hfa_deviation =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N_seasons,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_teams,
            DUMMY_VAR__));
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_seasons; ++sym2__) {
          current_statement__ = 5;
          stan::model::assign(z_team_hfa_deviation,
            in__.read<local_scalar_t__>(),
            "assigning variable z_team_hfa_deviation",
            stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
        }
      }
      out__.write_free_sum_to_zero(z_team_hfa_deviation);
      local_scalar_t__ sigma_team_hfa = DUMMY_VAR__;
      current_statement__ = 6;
      sigma_team_hfa = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_team_hfa);
      Eigen::Matrix<local_scalar_t__,-1,1> z_team_strength_init =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_teams, DUMMY_VAR__);
      current_statement__ = 7;
      stan::model::assign(z_team_strength_init,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N_teams),
        "assigning variable z_team_strength_init");
      out__.write_free_sum_to_zero(z_team_strength_init);
      local_scalar_t__ sigma_team_strength_init = DUMMY_VAR__;
      current_statement__ = 8;
      sigma_team_strength_init = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_team_strength_init);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        z_weekly_team_strength_innovation =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(z_weekly_team_strength_innovation_1dim__,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_teams,
            DUMMY_VAR__));
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
        for (int sym2__ = 1; sym2__ <=
             z_weekly_team_strength_innovation_1dim__; ++sym2__) {
          current_statement__ = 9;
          stan::model::assign(z_weekly_team_strength_innovation,
            in__.read<local_scalar_t__>(),
            "assigning variable z_weekly_team_strength_innovation",
            stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
        }
      }
      out__.write_free_sum_to_zero(z_weekly_team_strength_innovation);
      local_scalar_t__ sigma_weekly_team_strength_innovation = DUMMY_VAR__;
      current_statement__ = 10;
      sigma_weekly_team_strength_innovation = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_weekly_team_strength_innovation);
      local_scalar_t__ phi_weekly_team_strength_innovation = DUMMY_VAR__;
      current_statement__ = 11;
      phi_weekly_team_strength_innovation = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, phi_weekly_team_strength_innovation);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        z_season_team_strength_innovation =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(z_season_team_strength_innovation_1dim__,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_teams,
            DUMMY_VAR__));
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
        for (int sym2__ = 1; sym2__ <=
             z_season_team_strength_innovation_1dim__; ++sym2__) {
          current_statement__ = 12;
          stan::model::assign(z_season_team_strength_innovation,
            in__.read<local_scalar_t__>(),
            "assigning variable z_season_team_strength_innovation",
            stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
        }
      }
      out__.write_free_sum_to_zero(z_season_team_strength_innovation);
      local_scalar_t__ sigma_season_team_strength_innovation = DUMMY_VAR__;
      current_statement__ = 13;
      sigma_season_team_strength_innovation = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_season_team_strength_innovation);
      local_scalar_t__ phi_season_team_strength_innovation = DUMMY_VAR__;
      current_statement__ = 14;
      phi_season_team_strength_innovation = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, phi_season_team_strength_innovation);
      local_scalar_t__ sigma_obs = DUMMY_VAR__;
      current_statement__ = 15;
      sigma_obs = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_obs);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "league_hfa_init",
        "double", std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization",
        "z_league_hfa_innovation", "double",
        std::vector<size_t>{static_cast<size_t>(
                              z_league_hfa_innovation_1dim__)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization",
        "sigma_league_hfa_innovation", "double", std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "phi_league_hfa",
        "double", std::vector<size_t>{});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization",
        "z_team_hfa_deviation", "double",
        std::vector<size_t>{static_cast<size_t>(N_seasons),
          static_cast<size_t>(N_teams)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "sigma_team_hfa",
        "double", std::vector<size_t>{});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization",
        "z_team_strength_init", "double",
        std::vector<size_t>{static_cast<size_t>(N_teams)});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization",
        "sigma_team_strength_init", "double", std::vector<size_t>{});
      current_statement__ = 9;
      context__.validate_dims("parameter initialization",
        "z_weekly_team_strength_innovation", "double",
        std::vector<size_t>{static_cast<size_t>(
                              z_weekly_team_strength_innovation_1dim__),
          static_cast<size_t>(N_teams)});
      current_statement__ = 10;
      context__.validate_dims("parameter initialization",
        "sigma_weekly_team_strength_innovation", "double",
        std::vector<size_t>{});
      current_statement__ = 11;
      context__.validate_dims("parameter initialization",
        "phi_weekly_team_strength_innovation", "double",
        std::vector<size_t>{});
      current_statement__ = 12;
      context__.validate_dims("parameter initialization",
        "z_season_team_strength_innovation", "double",
        std::vector<size_t>{static_cast<size_t>(
                              z_season_team_strength_innovation_1dim__),
          static_cast<size_t>(N_teams)});
      current_statement__ = 13;
      context__.validate_dims("parameter initialization",
        "sigma_season_team_strength_innovation", "double",
        std::vector<size_t>{});
      current_statement__ = 14;
      context__.validate_dims("parameter initialization",
        "phi_season_team_strength_innovation", "double",
        std::vector<size_t>{});
      current_statement__ = 15;
      context__.validate_dims("parameter initialization", "sigma_obs",
        "double", std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ league_hfa_init = DUMMY_VAR__;
      current_statement__ = 1;
      league_hfa_init = context__.vals_r("league_hfa_init")[(1 - 1)];
      out__.write(league_hfa_init);
      Eigen::Matrix<local_scalar_t__,-1,1> z_league_hfa_innovation =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(z_league_hfa_innovation_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> z_league_hfa_innovation_flat__;
        current_statement__ = 2;
        z_league_hfa_innovation_flat__ = context__.vals_r("z_league_hfa_innovation");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <=
             z_league_hfa_innovation_1dim__; ++sym1__) {
          stan::model::assign(z_league_hfa_innovation,
            z_league_hfa_innovation_flat__[(pos__ - 1)],
            "assigning variable z_league_hfa_innovation",
            stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(z_league_hfa_innovation);
      local_scalar_t__ sigma_league_hfa_innovation = DUMMY_VAR__;
      current_statement__ = 3;
      sigma_league_hfa_innovation = context__.vals_r("sigma_league_hfa_innovation")[(1
        - 1)];
      out__.write_free_lb(0, sigma_league_hfa_innovation);
      local_scalar_t__ phi_league_hfa = DUMMY_VAR__;
      current_statement__ = 4;
      phi_league_hfa = context__.vals_r("phi_league_hfa")[(1 - 1)];
      out__.write_free_lub(0, 1, phi_league_hfa);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        z_team_hfa_deviation =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N_seasons,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_teams,
            DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> z_team_hfa_deviation_flat__;
        current_statement__ = 5;
        z_team_hfa_deviation_flat__ = context__.vals_r("z_team_hfa_deviation");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N_seasons; ++sym2__) {
            stan::model::assign(z_team_hfa_deviation,
              z_team_hfa_deviation_flat__[(pos__ - 1)],
              "assigning variable z_team_hfa_deviation",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_sum_to_zero(z_team_hfa_deviation);
      local_scalar_t__ sigma_team_hfa = DUMMY_VAR__;
      current_statement__ = 6;
      sigma_team_hfa = context__.vals_r("sigma_team_hfa")[(1 - 1)];
      out__.write_free_lb(0, sigma_team_hfa);
      Eigen::Matrix<local_scalar_t__,-1,1> z_team_strength_init =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_teams, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> z_team_strength_init_flat__;
        current_statement__ = 7;
        z_team_strength_init_flat__ = context__.vals_r("z_team_strength_init");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
          stan::model::assign(z_team_strength_init,
            z_team_strength_init_flat__[(pos__ - 1)],
            "assigning variable z_team_strength_init",
            stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_sum_to_zero(z_team_strength_init);
      local_scalar_t__ sigma_team_strength_init = DUMMY_VAR__;
      current_statement__ = 8;
      sigma_team_strength_init = context__.vals_r("sigma_team_strength_init")[(1
        - 1)];
      out__.write_free_lb(0, sigma_team_strength_init);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        z_weekly_team_strength_innovation =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(z_weekly_team_strength_innovation_1dim__,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_teams,
            DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> z_weekly_team_strength_innovation_flat__;
        current_statement__ = 9;
        z_weekly_team_strength_innovation_flat__ = context__.vals_r("z_weekly_team_strength_innovation");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
          for (int sym2__ = 1; sym2__ <=
               z_weekly_team_strength_innovation_1dim__; ++sym2__) {
            stan::model::assign(z_weekly_team_strength_innovation,
              z_weekly_team_strength_innovation_flat__[(pos__ - 1)],
              "assigning variable z_weekly_team_strength_innovation",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_sum_to_zero(z_weekly_team_strength_innovation);
      local_scalar_t__ sigma_weekly_team_strength_innovation = DUMMY_VAR__;
      current_statement__ = 10;
      sigma_weekly_team_strength_innovation = context__.vals_r("sigma_weekly_team_strength_innovation")[(1
        - 1)];
      out__.write_free_lb(0, sigma_weekly_team_strength_innovation);
      local_scalar_t__ phi_weekly_team_strength_innovation = DUMMY_VAR__;
      current_statement__ = 11;
      phi_weekly_team_strength_innovation = context__.vals_r("phi_weekly_team_strength_innovation")[(1
        - 1)];
      out__.write_free_lub(0, 1, phi_weekly_team_strength_innovation);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        z_season_team_strength_innovation =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(z_season_team_strength_innovation_1dim__,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_teams,
            DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> z_season_team_strength_innovation_flat__;
        current_statement__ = 12;
        z_season_team_strength_innovation_flat__ = context__.vals_r("z_season_team_strength_innovation");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
          for (int sym2__ = 1; sym2__ <=
               z_season_team_strength_innovation_1dim__; ++sym2__) {
            stan::model::assign(z_season_team_strength_innovation,
              z_season_team_strength_innovation_flat__[(pos__ - 1)],
              "assigning variable z_season_team_strength_innovation",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_sum_to_zero(z_season_team_strength_innovation);
      local_scalar_t__ sigma_season_team_strength_innovation = DUMMY_VAR__;
      current_statement__ = 13;
      sigma_season_team_strength_innovation = context__.vals_r("sigma_season_team_strength_innovation")[(1
        - 1)];
      out__.write_free_lb(0, sigma_season_team_strength_innovation);
      local_scalar_t__ phi_season_team_strength_innovation = DUMMY_VAR__;
      current_statement__ = 14;
      phi_season_team_strength_innovation = context__.vals_r("phi_season_team_strength_innovation")[(1
        - 1)];
      out__.write_free_lub(0, 1, phi_season_team_strength_innovation);
      local_scalar_t__ sigma_obs = DUMMY_VAR__;
      current_statement__ = 15;
      sigma_obs = context__.vals_r("sigma_obs")[(1 - 1)];
      out__.write_free_lb(0, sigma_obs);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"league_hfa_init",
                "z_league_hfa_innovation", "sigma_league_hfa_innovation",
                "phi_league_hfa", "z_team_hfa_deviation", "sigma_team_hfa",
                "z_team_strength_init", "sigma_team_strength_init",
                "z_weekly_team_strength_innovation",
                "sigma_weekly_team_strength_innovation",
                "phi_weekly_team_strength_innovation",
                "z_season_team_strength_innovation",
                "sigma_season_team_strength_innovation",
                "phi_season_team_strength_innovation", "sigma_obs"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"league_hfa", "team_hfa", "team_strength", "mu"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string>
        temp{"last_w", "last_s", "filtered_team_strength",
             "filtered_team_hfa", "filtered_league_hfa",
             "predicted_team_strength", "predicted_team_hfa",
             "predicted_league_hfa", "log_lik"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(
                                      z_league_hfa_innovation_1dim__)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(N_seasons),
                  static_cast<size_t>(N_teams)}, std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(N_teams)},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(
                                      z_weekly_team_strength_innovation_1dim__),
                  static_cast<size_t>(N_teams)}, std::vector<size_t>{},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(
                                      z_season_team_strength_innovation_1dim__),
                  static_cast<size_t>(N_teams)}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N_seasons)},
             std::vector<size_t>{static_cast<size_t>(N_seasons),
               static_cast<size_t>(N_teams)},
             std::vector<size_t>{static_cast<size_t>(N_weeks),
               static_cast<size_t>(N_teams)},
             std::vector<size_t>{static_cast<size_t>(N_games)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(N_teams)},
             std::vector<size_t>{static_cast<size_t>(N_teams)},
             std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(N_teams)},
             std::vector<size_t>{static_cast<size_t>(N_teams)},
             std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(N_games)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "league_hfa_init");
    for (int sym1__ = 1; sym1__ <= z_league_hfa_innovation_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "z_league_hfa_innovation" +
        '.' + std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma_league_hfa_innovation");
    param_names__.emplace_back(std::string() + "phi_league_hfa");
    for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= N_seasons; ++sym2__) {
        param_names__.emplace_back(std::string() + "z_team_hfa_deviation" +
          '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    param_names__.emplace_back(std::string() + "sigma_team_hfa");
    for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
      param_names__.emplace_back(std::string() + "z_team_strength_init" + '.'
        + std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma_team_strength_init");
    for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
      for (int sym2__ = 1; sym2__ <=
           z_weekly_team_strength_innovation_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() +
          "z_weekly_team_strength_innovation" + '.' + std::to_string(sym2__)
          + '.' + std::to_string(sym1__));
      }
    }
    param_names__.emplace_back(std::string() +
      "sigma_weekly_team_strength_innovation");
    param_names__.emplace_back(std::string() +
      "phi_weekly_team_strength_innovation");
    for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
      for (int sym2__ = 1; sym2__ <=
           z_season_team_strength_innovation_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() +
          "z_season_team_strength_innovation" + '.' + std::to_string(sym2__)
          + '.' + std::to_string(sym1__));
      }
    }
    param_names__.emplace_back(std::string() +
      "sigma_season_team_strength_innovation");
    param_names__.emplace_back(std::string() +
      "phi_season_team_strength_innovation");
    param_names__.emplace_back(std::string() + "sigma_obs");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N_seasons; ++sym1__) {
        param_names__.emplace_back(std::string() + "league_hfa" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_seasons; ++sym2__) {
          param_names__.emplace_back(std::string() + "team_hfa" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_weeks; ++sym2__) {
          param_names__.emplace_back(std::string() + "team_strength" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_games; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "last_w");
      param_names__.emplace_back(std::string() + "last_s");
      for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
        param_names__.emplace_back(std::string() + "filtered_team_strength" +
          '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
        param_names__.emplace_back(std::string() + "filtered_team_hfa" + '.'
          + std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "filtered_league_hfa");
      for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
        param_names__.emplace_back(std::string() + "predicted_team_strength"
          + '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
        param_names__.emplace_back(std::string() + "predicted_team_hfa" + '.'
          + std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "predicted_league_hfa");
      for (int sym1__ = 1; sym1__ <= N_games; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "league_hfa_init");
    for (int sym1__ = 1; sym1__ <= z_league_hfa_innovation_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "z_league_hfa_innovation" +
        '.' + std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma_league_hfa_innovation");
    param_names__.emplace_back(std::string() + "phi_league_hfa");
    for (int sym1__ = 1; sym1__ <= (N_teams - 1); ++sym1__) {
      for (int sym2__ = 1; sym2__ <= N_seasons; ++sym2__) {
        param_names__.emplace_back(std::string() + "z_team_hfa_deviation" +
          '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    param_names__.emplace_back(std::string() + "sigma_team_hfa");
    for (int sym1__ = 1; sym1__ <= (N_teams - 1); ++sym1__) {
      param_names__.emplace_back(std::string() + "z_team_strength_init" + '.'
        + std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma_team_strength_init");
    for (int sym1__ = 1; sym1__ <= (N_teams - 1); ++sym1__) {
      for (int sym2__ = 1; sym2__ <=
           z_weekly_team_strength_innovation_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() +
          "z_weekly_team_strength_innovation" + '.' + std::to_string(sym2__)
          + '.' + std::to_string(sym1__));
      }
    }
    param_names__.emplace_back(std::string() +
      "sigma_weekly_team_strength_innovation");
    param_names__.emplace_back(std::string() +
      "phi_weekly_team_strength_innovation");
    for (int sym1__ = 1; sym1__ <= (N_teams - 1); ++sym1__) {
      for (int sym2__ = 1; sym2__ <=
           z_season_team_strength_innovation_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() +
          "z_season_team_strength_innovation" + '.' + std::to_string(sym2__)
          + '.' + std::to_string(sym1__));
      }
    }
    param_names__.emplace_back(std::string() +
      "sigma_season_team_strength_innovation");
    param_names__.emplace_back(std::string() +
      "phi_season_team_strength_innovation");
    param_names__.emplace_back(std::string() + "sigma_obs");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N_seasons; ++sym1__) {
        param_names__.emplace_back(std::string() + "league_hfa" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_seasons; ++sym2__) {
          param_names__.emplace_back(std::string() + "team_hfa" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_weeks; ++sym2__) {
          param_names__.emplace_back(std::string() + "team_strength" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_games; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "last_w");
      param_names__.emplace_back(std::string() + "last_s");
      for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
        param_names__.emplace_back(std::string() + "filtered_team_strength" +
          '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
        param_names__.emplace_back(std::string() + "filtered_team_hfa" + '.'
          + std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "filtered_league_hfa");
      for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
        param_names__.emplace_back(std::string() + "predicted_team_strength"
          + '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_teams; ++sym1__) {
        param_names__.emplace_back(std::string() + "predicted_team_hfa" + '.'
          + std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "predicted_league_hfa");
      for (int sym1__ = 1; sym1__ <= N_games; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"league_hfa_init\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_league_hfa_innovation\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(z_league_hfa_innovation_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"sigma_league_hfa_innovation\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi_league_hfa\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_team_hfa_deviation\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_seasons) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_teams) + "}},\"block\":\"parameters\"},{\"name\":\"sigma_team_hfa\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_team_strength_init\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_teams) + "},\"block\":\"parameters\"},{\"name\":\"sigma_team_strength_init\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_weekly_team_strength_innovation\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(z_weekly_team_strength_innovation_1dim__) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_teams) + "}},\"block\":\"parameters\"},{\"name\":\"sigma_weekly_team_strength_innovation\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi_weekly_team_strength_innovation\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_season_team_strength_innovation\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(z_season_team_strength_innovation_1dim__) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_teams) + "}},\"block\":\"parameters\"},{\"name\":\"sigma_season_team_strength_innovation\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi_season_team_strength_innovation\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_obs\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"league_hfa\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_seasons) + "},\"block\":\"transformed_parameters\"},{\"name\":\"team_hfa\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_seasons) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_teams) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"team_strength\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_weeks) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_teams) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_games) + "},\"block\":\"transformed_parameters\"},{\"name\":\"last_w\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"last_s\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"filtered_team_strength\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_teams) + "},\"block\":\"generated_quantities\"},{\"name\":\"filtered_team_hfa\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_teams) + "},\"block\":\"generated_quantities\"},{\"name\":\"filtered_league_hfa\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"predicted_team_strength\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_teams) + "},\"block\":\"generated_quantities\"},{\"name\":\"predicted_team_hfa\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_teams) + "},\"block\":\"generated_quantities\"},{\"name\":\"predicted_league_hfa\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_games) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"league_hfa_init\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_league_hfa_innovation\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(z_league_hfa_innovation_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"sigma_league_hfa_innovation\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi_league_hfa\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_team_hfa_deviation\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_seasons) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string((N_teams -1)) + "}},\"block\":\"parameters\"},{\"name\":\"sigma_team_hfa\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_team_strength_init\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string((N_teams -1)) + "},\"block\":\"parameters\"},{\"name\":\"sigma_team_strength_init\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_weekly_team_strength_innovation\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(z_weekly_team_strength_innovation_1dim__) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string((N_teams -1)) + "}},\"block\":\"parameters\"},{\"name\":\"sigma_weekly_team_strength_innovation\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi_weekly_team_strength_innovation\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_season_team_strength_innovation\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(z_season_team_strength_innovation_1dim__) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string((N_teams -1)) + "}},\"block\":\"parameters\"},{\"name\":\"sigma_season_team_strength_innovation\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi_season_team_strength_innovation\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_obs\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"league_hfa\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_seasons) + "},\"block\":\"transformed_parameters\"},{\"name\":\"team_hfa\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_seasons) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_teams) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"team_strength\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_weeks) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_teams) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_games) + "},\"block\":\"transformed_parameters\"},{\"name\":\"last_w\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"last_s\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"filtered_team_strength\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_teams) + "},\"block\":\"generated_quantities\"},{\"name\":\"filtered_team_hfa\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_teams) + "},\"block\":\"generated_quantities\"},{\"name\":\"filtered_league_hfa\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"predicted_team_strength\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_teams) + "},\"block\":\"generated_quantities\"},{\"name\":\"predicted_team_hfa\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_teams) + "},\"block\":\"generated_quantities\"},{\"name\":\"predicted_league_hfa\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_games) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((((((((1 +
      z_league_hfa_innovation_1dim__) + 1) + 1) + (N_seasons * N_teams)) + 1)
      + N_teams) + 1) + (z_weekly_team_strength_innovation_1dim__ * N_teams))
      + 1) + 1) + (z_season_team_strength_innovation_1dim__ * N_teams)) + 1)
      + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters *
      ((((N_seasons + (N_seasons * N_teams)) + (N_weeks * N_teams)) +
      N_games));
    const size_t num_gen_quantities = emit_generated_quantities * (((((((((1
      + 1) + N_teams) + N_teams) + 1) + N_teams) + N_teams) + 1) + N_games));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((((((((1 +
      z_league_hfa_innovation_1dim__) + 1) + 1) + (N_seasons * N_teams)) + 1)
      + N_teams) + 1) + (z_weekly_team_strength_innovation_1dim__ * N_teams))
      + 1) + 1) + (z_season_team_strength_innovation_1dim__ * N_teams)) + 1)
      + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters *
      ((((N_seasons + (N_seasons * N_teams)) + (N_weeks * N_teams)) +
      N_games));
    const size_t num_gen_quantities = emit_generated_quantities * (((((((((1
      + 1) + N_teams) + N_teams) + 1) + N_teams) + N_teams) + 1) + N_games));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_latent_strength_ssm_namespace::model_latent_strength_ssm;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_latent_strength_ssm_namespace::profiles__;
}
#endif
#endif
